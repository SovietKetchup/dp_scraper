[{:title=>"[2016-08-26] Challenge #280 [Hard] Free Flow Solver", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4zog32/20160826_challenge_280_hard_free_flow_solver/", :permalink=>"/r/dailyprogrammer/comments/4zog32/20160826_challenge_280_hard_free_flow_solver/", :score=>72, :comments=>16, :description=>"\n# Description\n\nFlow Free is a game that consists of an n*m grid with some cells that have a color (the other cells are initially empty). For every colored cell, there is exactly one other cell on the grid that has the same color -- there can't be 3 cells with the same color, or a cell that is unique in its color.\n\nThe objective of the player is to connect all the matching colors in the grid, by making \"pipes\" between them, that go through empty cells.\n\nThe pipes must not cross or overlap, and they have to cover the whole board.\n\n[Here](http://i.imgur.com/xLQXz.jpg)'s an example of a Flow Free puzzle (to the left) and its solution (right). For additional clarification, [Here](https://www.youtube.com/watch?v=83g8pDQg_Ng)'s somebody solving some puzzles.\n\nYour objective is to write a program that, given a Flow Free puzzle, outputs its solution.\n\n# Formal Inputs and Outputs\n\nWe will represent the positions of the grid using Cartesian coordinates: the upper leftmost cell is (0, 0), and the cell that is located n cells to the right of it and m cells underneath it, is called (n, m).\n\n## Input Description\n\nThe first line consists 3 numbers, *A*, *N*, and *M*, separated by space. *A* is the number of colors, *N* is the width of the grid and *M* is its height.\nThe next *A* lines specify the matching cells - each line contains two cartesian coordinates (for matching cells), separated by a space `(x1, y1) (x2, y2)`.\n\nExample (for [the puzzle](http://i.imgur.com/xLQXz.jpg) that was previously given as an example):\n\n    5 5 5\n    (1, 0) (0, 3)\n    (2, 0) (0, 4)\n    (3, 0) (3, 4)\n    (3, 1) (2, 2)\n    (2, 4) (3, 3)\n\n## Output Description\n\nThe output consists of *A* lines, each line is a sequence of some cartesian coordinates (separated by a space), that specifies the path of a pipe between two matching cells.\n\nThe first and last cells of an output line are the matching cells that were initially colored, everything between them consists of the cells of the pipe. The order of the output's lines doesn't matter - it doesn't have to correspond to the input.\n\nPossible example output (Again, the lines don't have to be sorted in a certain way):\n\n    (2, 0) (2, 1) (1, 1) (1, 2) (1, 3) (1, 4) (0, 4)\n    (1, 0) (0, 0) (0, 1) (0, 2) (0, 3)\n    (3, 0) (4, 0) (4, 1) (4, 2) (4, 3) (4, 4) (3, 4)\n    (2, 4) (2, 3) (3, 3)\n    (3, 1) (3, 2) (2, 2)\n\n# Credit\n\nThis challenge was suggested by /u/Avnerium. If you have a challenge idea, please share it in /r/dailyprogrammer_ideas and there's a good chance we'll use it."}, {:title=>"[2016-08-24] Challenge #280 [Intermediate] Anagram Maker", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4zcly2/20160824_challenge_280_intermediate_anagram_maker/", :permalink=>"/r/dailyprogrammer/comments/4zcly2/20160824_challenge_280_intermediate_anagram_maker/", :score=>54, :comments=>37, :description=>"# Description\n\nAnagrams, where you take the letters from one or more words and rearrange them to spell something else, are a fun word game. \n\nIn this challenge you'll be asked to create anagrams from specific inputs. You should ignore capitalization as needed, and use only English language words. Note that because there are so many possibilities, there are no \"right\" answers so long as they're valid English language words and proper anagrams. \n\n# Example Input\n\nFirst you'll be given an integer on a single line, this tells you how many lines to read. Then you'll be given a word (or words) on *N* lines to make anagrams for. Example:\n\n    1\n    Field of dreams\n\n# Example Output \n\nYour program should emit the original word and one or more anagrams it developed. Example:\n\n    Field of dreams -&gt; Dads Offer Lime\n    Field of dreams -&gt; Deaf Fold Miser\n\n# Challenge Input\n\n    6\n    Desperate\n    Redditor\n    Dailyprogrammer\n    Sam likes to swim\n    The Morse Code\n    Help, someone stole my purse\n\n# English Wordlist\n\nFeel free to use the venerable http://norvig.com/ngrams/enable1.txt "}, {:title=>"[2016-08-22] Challenge #280 [Easy] 0 to 100, Real Quick", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4z04vj/20160822_challenge_280_easy_0_to_100_real_quick/", :permalink=>"/r/dailyprogrammer/comments/4z04vj/20160822_challenge_280_easy_0_to_100_real_quick/", :score=>77, :comments=>141, :description=>"# Description\n\nOh, how cursed we are to have but 10 digits upon our fingers. Imagine the possibilities were we able to count to numbers beyond! But halt! With 10 digits upon our two appendages, 1024 unique combinations appear! But alas, counting in this manner is cumbersome, and counting to such a number beyond reason. Surely being able to count up to 100 would suffice!\n\n\nYou will be given inputs which correspond to the 10 digits of a pair of hands in the following format, where 1 means the finger is raised, and 0 means the finger is down.\n\nExample:\n\n    **LP** | **LR** | **LM** | **LI** | **LT** |  **RT** | **RI** | **RM** | **RR** | **RP**\n    ---------|-----------|-----------|----------|-----------|-----------|----------|------------|-----------|----------\n    0 | 1 | 1 | 1 | 0 | 1 | 1| 1| 0| 0\n    \n    L = Left, R = Right, P = Pinky, R = Ring Finger, M = Middle Finger, I = Index Finger, T = Thumb\n\n\nYour challenge is to take these inputs, and:\n\n1. Determine if it is valid based on [this counting scheme](http://www.wikihow.com/Count-to-99-on-Your-Fingers). \n\n2. If it is, then decode the inputs into the number represented by the digits on the hand.\n\n# Formal Inputs and Outputs\n\n\n    0111011100 -&gt; 37\n    1010010000 -&gt; Invalid\n    0011101110 -&gt; 73\n    0000110000 -&gt; 55\n    1111110001 -&gt; Invalid\n\n# Credit\n\nThis challenge was submitted by /u/abyssalheaven. Thank you! If you have any challenge ideas, please share them in /r/dailyprogrammer_ideas and there's a good chance we'll use them. "}, {:title=>"[2016-08-18] Challenge #279 [Intermediate] Text Reflow", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4ybbcz/20160818_challenge_279_intermediate_text_reflow/", :permalink=>"/r/dailyprogrammer/comments/4ybbcz/20160818_challenge_279_intermediate_text_reflow/", :score=>76, :comments=>78, :description=>"#Description:\n\nText reflow means to break up lines of text so that they fit within a certain width. It is useful in e.g. mobile browsers. When you zoom in on a web page the lines will become too long to fit the width of the screen, unless the text is broken up into shorter lines.\n\n\n#Input:\n\nYou will be given a text with a maximum line width of 80 characters.\n\n\n#Output:\n\nProduce the same text with a maximum line width of 40 characters\n\n\n#Challenge Input:\n\n    In the beginning God created the heavens and the earth. Now the earth was \n    formless and empty, darkness was over the surface of the deep, and the Spirit of\n    God was hovering over the waters.\n\n    And God said, \"Let there be light,\" and there was light. God saw that the light\n    was good, and he separated the light from the darkness. God called the light\n    \"day,\" and the darkness he called \"night.\" And there was evening, and there was\n    morning - the first day.\n\n\n#Challenge Output:\n\n    In the beginning God created the heavens\n    and the earth. Now the earth was\n    formless and empty, darkness was over\n    the surface of the deep, and the Spirit\n    of God was hovering over the waters.\n\n    And God said, \"Let there be light,\" and\n    there was light. God saw that the light\n    was good, and he separated the light\n    from the darkness. God called the light\n    \"day,\" and the darkness he called\n    \"night.\" And there was evening, and\n    there was morning - the first day.\n\n    \n#Bonus:\n\nLet's get rid of the jagged right margin of the text and make the output prettier. Output the text with full justification; Adjusting the word spacing so that the text is flush against both the left and the right margin.\n\n\n#Bonus Output:\n\n    In the beginning God created the heavens\n    and   the  earth.   Now  the  earth  was\n    formless  and empty,  darkness was  over\n    the  surface of the deep, and the Spirit\n    of  God was  hovering over  the  waters.\n\n    And  God said, \"Let there be light,\" and\n    there  was light. God saw that the light\n    was  good, and  he separated  the  light\n    from  the darkness. God called the light\n    \"day,\"   and  the   darkness  he  called\n    \"night.\"  And  there  was  evening,  and\n    there  was  morning  -  the  first  day.\n\n\n#Finally\n\nThis challenge is posted by /u/slampropp\n\nAlso have a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas"}, {:title=>"[2016-08-16] Challenge #279 [Easy] Uuencoding", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4xy6i1/20160816_challenge_279_easy_uuencoding/", :permalink=>"/r/dailyprogrammer/comments/4xy6i1/20160816_challenge_279_easy_uuencoding/", :score=>89, :comments=>63, :description=>"You are trapped at uninhabited island only with your laptop. Still you don't want your significant other to worry about you, so you are going to send a message in a bottle with your picture or at least a couple of words from you (sure, you could just write down the words, but that would be less fun). You're going to use uuencoding for that.\n\nUuencoding is a form of binary-to-text encoding, which uses only symbols from 32-95 diapason, which means all symbols used in the encoding are printable.\n\n#Description of encoding\n\nA uuencoded file starts with a header line of the form:\n\n    begin &lt;mode&gt; &lt;file&gt;&lt;newline&gt;\n\n&lt;mode&gt; is the file's Unix file permissions as three octal digits (e.g. 644, 744). For Windows 644 is always used.\n\n&lt;file&gt; is the file name to be used when recreating the binary data.\n\n&lt;newline&gt; signifies a newline character, used to terminate each line.\n\nEach data line uses the format:\n\n    &lt;length character&gt;&lt;formatted characters&gt;&lt;newline&gt;\n\n&lt;length character&gt; is a character indicating the number of data bytes which have been encoded on that line. This is an ASCII character determined by adding 32 to the actual byte count, with the sole exception of a grave accent \"`\" (ASCII code 96) signifying zero bytes. All data lines except the last (if the data was not divisible by 45), have 45 bytes of encoded data (60 characters after encoding). Therefore, the vast majority of length values is 'M', (32 + 45 = ASCII code 77 or \"M\").\n\n\n&lt;formatted characters&gt; are encoded characters.\n\nThe mechanism of uuencoding repeats the following for every 3 bytes (if there are less than 3 bytes left, trailing 0 are added):\n\n1. Start with 3 bytes from the source, 24 bits in total.\n\n2. Split into 4 6-bit groupings, each representing a value in the range 0 to 63: bits (00-05), (06-11), (12-17) and (18-23).\n\n3. Add 32 to each of the values. With the addition of 32 this means that the possible results can be between 32 (\" \" space) and 95 (\"_\" underline). 96 (\"`\" grave accent) as the \"special character\" is a logical extension of this range.\n\n4. Output the ASCII equivalent of these numbers.\n\n\nFor example, we want to encode a word \"Cat\". ASCII values for C,a,t are 67,97,116, or  `010000110110000101110100` in binary. After dividing into four groups, we get 010000 110110 000101 110100, which is 16,54,5,52 in decimal. Adding 32 to this values and encoding back in ASCII, the final result is `0V%T`.\n\nThe file ends with two lines:\n\n    `&lt;newline&gt;\n    end&lt;newline&gt;\n#Formal Inputs &amp; Outputs\n##Input\na byte array or string.\n##Output\na string containing uuencoded input.\n\n#Examples\nInput: Cat\n\nOutput:\n \n    begin 644 cat.txt\n    #0V%T\n    `\n    end\n\nInput:\nI feel very strongly about you doing duty. Would you give me a little more documentation about your reading in French? I am glad you are happy — but I never believe much in happiness. I never believe in misery either. Those are things you see on the stage or the screen or the printed pages, they never really happen to you in life.\n\n\nOutput:\n\n    begin 644 file.txt\n    M22!F965L('9E&lt;GD@&lt;W1R;VYG;'D@86)O=70@&gt;6]U(&amp;1O:6YG(&amp;1U='DN(%=O\n    M=6QD('EO=2!G:79E(&amp;UE(&amp;$@;&amp;ET=&amp;QE(&amp;UO&lt;F4@9&amp;]C=6UE;G1A=&amp;EO;B!A\n    M8F]U=\"!Y;W5R(')E861I;F&lt;@:6X@1G)E;F-H/R!)(&amp;%M(&amp;=L860@&gt;6]U(&amp;%R\n    M92!H87!P&gt;2#B@)0@8G5T($D@;F5V97(@8F5L:65V92!M=6-H(&amp;EN(&amp;AA&lt;'!I\n    M;F5S&lt;RX@22!N979E&lt;B!B96QI979E(&amp;EN(&amp;UI&lt;V5R&gt;2!E:71H97(N(%1H;W-E\n    M(&amp;%R92!T:&amp;EN9W,@&gt;6]U('-E92!O;B!T:&amp;4@&lt;W1A9V4@;W(@=&amp;AE('-C&lt;F5E\n    M;B!O&lt;B!T:&amp;4@&lt;')I;G1E9\"!P86=E&lt;RP@=&amp;AE&gt;2!N979E&lt;B!R96%L;'D@:&amp;%P\n    3&lt;&amp;5N('1O('EO=2!I;B!L:69E+C P\n    `\n    end\n\n#Bonuses\n##Bonus 1\nWrite uudecoder, which decodes uuencoded input back to a byte array or string\n##Bonus 2\nWrite encoder for files as well.\n##Bonus 3\nMake encoding parallel.\n#Further Reading\n[Binary-to-text encoding](https://en.wikipedia.org/wiki/Binary-to-text_encoding) on Wikipedia.\n\n#Finally\n\nThis challenge is posted by /u/EvgeniyZh\n\nAlso have a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas"}, {:title=>"[2016-08-08] Challenge #278 [Easy/Med] Weave insert Part 1", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4wqzph/20160808_challenge_278_easymed_weave_insert_part_1/", :permalink=>"/r/dailyprogrammer/comments/4wqzph/20160808_challenge_278_easymed_weave_insert_part_1/", :score=>44, :comments=>70, :description=>"This week's challenges are functional approaches to data interleaving.  This is usually done in the context of data being code or other machine (xml) representation.  Part 2 bonuses will be posted later in the week.\n\n# input of 2 arrays\n\nFirst array (or scalar) argument gets interleaved into 2nd array.  :\n\n     insWeave([11]. [0, 1, 2, 3])  \n0 , 11 , 1 , 11 , 2 , 11 , 3\n\nIf first array is shorter than 2nd, it is extended cyclically\n\n     insWeave([11,12]. [0, 1, 2, 3])  \n0 , 11 , 1  , 12 , 2 , 11 , 3\n\nIf the 2nd array is shorter than the first then the simplest option is to cut off the first array so that the 2 arrays have equal length.\n\n     insWeave([11,12,13]. [0, 1])  \n0 , 11 , 1\n\n# option 2:  shorter 2nd array is grouped by 2 and has items inserted in each pair. (strings are arrays of char)\n\n     insBracket ('abc'  , '()' )\n(a)  \n(b)  \n(c)  \n\n\n# string input\n\ninput format has each string within an array on its own line.  A blank line separates the 2 arrays.  A single string represents a character array.  The first line of input indicates \"Bracket\" or \"Weave\" to indicate use of the 2 alternate functions.\n\n**input:**\n\nBracket  \n+-  \n\n234567  \n\n**output:**  \n2+3  \n4-5  \n6+7  \n\n**input:**  \nBracket  \n2+3  \n4-5  \n6+7  \n\n()\n\n\n**output:**  \n(2+3)  \n(4-5)  \n(6+7)  \n\n**input:**  \nWeave  \n*\n\n(2+3)  \n(4-5)  \n(6+7)  \n\n**output:**  \n(2+3)  \n*    \n(4-5)  \n*     \n(6+7)  \n\n"}, {:title=>"[Weekly #25] Escape the trolls", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4vrb8n/weekly_25_escape_the_trolls/", :permalink=>"/r/dailyprogrammer/comments/4vrb8n/weekly_25_escape_the_trolls/", :score=>123, :comments=>40, :description=>"#Description\n\nWe are going to create a mini game. \nI'm going post updates with ideas, if you guys have them.\n\nThe goal of the game is to escape a maze and not get eaten by the trolls.\n\n#Phases of the game\n\n##Phase 1\nCreate your character and make it moveable.\nYou can use this amazing maze (see what I did there?) or create one yourself.\nIf you are going to use ASCII for the game, I suggest you use `&lt;&gt;v^` for your character since direction becomes important.\n\n    #########################################################################\n    #   #               #               #           #                   #   #\n    #   #   #########   #   #####   #########   #####   #####   #####   #   #\n    #               #       #   #           #           #   #   #       #   #\n    #########   #   #########   #########   #####   #   #   #   #########   #\n    #       #   #               #           #   #   #   #   #           #   #\n    #   #   #############   #   #   #########   #####   #   #########   #   #\n    #   #               #   #   #       #           #           #       #   #\n    #   #############   #####   #####   #   #####   #########   #   #####   #\n    #           #       #   #       #   #       #           #   #           #\n    #   #####   #####   #   #####   #   #########   #   #   #   #############\n    #       #       #   #   #       #       #       #   #   #       #       #\n    #############   #   #   #   #########   #   #####   #   #####   #####   #\n    #           #   #           #       #   #       #   #       #           #\n    #   #####   #   #########   #####   #   #####   #####   #############   #\n    #   #       #           #           #       #   #   #               #   #\n    #   #   #########   #   #####   #########   #   #   #############   #   #\n    #   #           #   #   #   #   #           #               #   #       #\n    #   #########   #   #   #   #####   #########   #########   #   #########\n    #   #       #   #   #           #           #   #       #               #\n    #   #   #####   #####   #####   #########   #####   #   #########   #   #\n    #   #                   #           #               #               #   #\n    # X #####################################################################\n\nSmall corridor version, thanks to /u/rakkar16\n\n    #####################################\n    # #       #       #     #         # #\n    # # ##### # ### ##### ### ### ### # #\n    #       #   # #     #     # # #   # #\n    ##### # ##### ##### ### # # # ##### #\n    #   # #       #     # # # # #     # #\n    # # ####### # # ##### ### # ##### # #\n    # #       # # #   #     #     #   # #\n    # ####### ### ### # ### ##### # ### #\n    #     #   # #   # #   #     # #     #\n    # ### ### # ### # ##### # # # #######\n    #   #   # # #   #   #   # # #   #   #\n    ####### # # # ##### # ### # ### ### #\n    #     # #     #   # #   # #   #     #\n    # ### # ##### ### # ### ### ####### #\n    # #   #     #     #   # # #       # #\n    # # ##### # ### ##### # # ####### # #\n    # #     # # # # #     #       # #   #\n    # ##### # # # ### ##### ##### # #####\n    # #   # # #     #     # #   #       #\n    # # ### ### ### ##### ### # ##### # #\n    # #         #     #       #       # #\n    #X###################################\n\nPlace the character in a random spot and navigate it to the exit. `X` marks the exit.\n\n##Phase 2\n\nWe have a more powerfull character now. He can push blocks that are in front of him.\nHe can only push blocks into an empty space, not into another block.\n\ne.g.\n\n    Can push\n\n    #   #     \n    # &gt; #   ##\n    #   #        \n\n    Can't push\n    \n    #   #     \n    # &gt; #####\n    #   #   \n\n##Phase 3\n\nLet's add some trolls. Place trolls at random spots and let them navigate to you character.\nYou can avoid the trolls by pushing blocks. \n\nThe trolls should move a block when you move a block, so it is turnbased.\n\n##Phase 4\nGenerate your own maze.\n\n#Notes/Hints\n\nEach movement is 1 turn. So turning your character spends 1 turn\n\nI propose to use ASCII for the game. \nBut if you want to use a framework with images, go ahead. If you do it in 3D, that is also fine.\n\nYou can use pathfinding for the trolls, but let's be honest, they are trolls. They should not be the brightest of them all.\n\nSome usefull links:\n\n- https://en.wikipedia.org/wiki/Maze_generation_algorithm\n- http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap\n\n- https://en.wikipedia.org/wiki/Pathfinding\n- http://theory.stanford.edu/~amitp/GameProgramming/AStarComparison.html\n\n#Bonus\n\nBonuses don't need to be done in any specific order\n\n##Bonus 1 by /u/JaumeGreen\n\nMake the trolls crushable. When you move a block on a troll, it is dead/crushed/pancaked.\n\n##Bonus 2\n\nMake it real time. You'll have to see what pacing of the trolls are doable.\n\n##Bonus 3 by /u/Dikaiarchos\n\nCreate tunnels to traverse the maze in a more complicated way.\n\n##Bonus 4 by /u/Dikaiarchos\n\nCreate a perfect maze algorithm (no loops to walk trough). This does makes the game a lot harder...\n\n##Bonus 5 by /u/gandalfx\n\nInstead of using `#` as a wall piece, you could use [UTF-8 boxes](https://en.wikipedia.org/wiki/Box-drawing_character)\n\n##Bonus 6 by /u/chunes\n\nAdd a limited sight for the player, so the player has to navigate without seeing the complete maze\n\n##Bonus 7 by /u/GentlemanGallimaufry\n\nWhen moving blocks, you have a chance that you block yourself from the exit.\nSo when this happens you should give a game over message.\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas"}, {:title=>"[ANN] Only one challenge this week", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4vr831/ann_only_one_challenge_this_week/", :permalink=>"/r/dailyprogrammer/comments/4vr831/ann_only_one_challenge_this_week/", :score=>16, :comments=>3, :description=>"#Announcement\n\nSince a lot of the people are on holidays, we are giving only one challenge this week. But it will be a larger one."}, {:title=>"[2016-07-29] Challenge #277 [Hard] Trippy Julia fractals", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4v5h3u/20160729_challenge_277_hard_trippy_julia_fractals/", :permalink=>"/r/dailyprogrammer/comments/4v5h3u/20160729_challenge_277_hard_trippy_julia_fractals/", :score=>73, :comments=>64, :description=>"#Description\n\nYou’re making a music video for an acid rock band. Far out man! Of course they want visual effects with fractals, because they’ve googled fractals, and they’re [super trippy](https://www.google.com/search?q=fractal&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=0ahUKEwjljOT9l7nNAhXIKo8KHct2CckQ_AUICCgB&amp;biw=1920&amp;bih=1014). Of course, they don’t know the mad programming needed to make these fractals. But you do, and that’s why they pay you money.\n\nA [Julia set](http://wikipedia.org/wiki/julia_set) is made by applying a function to the complex numbers repeatedly and keeping track of when the resulting numbers reach a threshold value. One number may take 200 iterations to achieve and absolute value over a certain threshold, value while an *almost* identical one might only take 10 iterations.\n\nHere, we’re interested in Julia sets because you can make [pretty pictures](https://en.wikipedia.org/wiki/Julia_set#/media/File:Julia_-0.8_0.156.png) with them if you map each complex input number to a pixel on the screen. The task today is to write a program that does all the math necessary for your computer to draw one of these beautiful pictures. In addition to making a buck from the band, you can also make a set of nice wallpapers for your desktop!\n\n\n##How to make a picture from a Julia set\n\n*1 – Pick your function*\n\nPick a function f which maps from a complex number z to another complex number. In our case we will use f(x) = z^2 – 0.221 – 0.713 i, because that makes a particularly pretty picture. To customize your own picture you can change the constant – 0.221 – 0.713 i to something else if you want.\nThe threshold value for this function is 2.\n\n*2 – Make a set of complex numbers*\n\nThe only complex numbers which are interesting for the Julia set are the ones where both the real and the imaginary part is between -1 and 1.  That’s because, if the absolute value of an input number exceeds the threshold value, it will keep increasing or decreasing without bounds when you keep applying your function. So your program needs to keep a whole bunch of these small complex numbers in memory – one number for each pixel in your final image.\n\n*3 - Apply f to that set of complex numbers iteratively*\n\nYour program needs to check *how many times you can apply the function f to each of the complex numbers above before its absolute value crosses the threshold value*. So for each of your complex numbers, you get number of iterations, I.\n\n*4 – Map the values of I to pixels in a picture*\n\nYou can do this in many ways, but an easier way, which I recommend, is that the real and imaginary parts of the complex numbers are the positions of the pixel on the X- and Y-axis, respectively, and I is the intensity of the pixel. You might want to set some cutoff to prevent specific pixels from iterating thousands of times.\n\n##Illustrative example\n\nSay I want to make a 3x3 pixel image. I use the function f(z) = z^2 – 0.221 – 0.713 i. I map the complex numbers with both real and imaginary parts in the interval [-1, 1] to the nine pixels, giving nine input complex numbers (pixels):\n\n(-1 + 1\\*i) (0 + 1\\*i) (1 + 1\\*i)\n\n(-1 + 0\\*i) (0 + 0\\*i) (1 + 0\\*i)\n\n(-1 - 1\\*i) (0 - 1\\*i) (1 - 1\\*i)\n\nI calculate how many times I need to apply f to each pixel before its absolute value crosses the threshold value 2:\n\n(1) (5) (2)\n\n(3) (112) (3)\n\n(2) (5) (1)\n\nFinally I convert it to a 3x3 pixel image with the intensities above (not shown).\n\n#Formal Inputs &amp; Outputs\n##Input description\n\nThe desired resolution in pixels written as X Y for example:\n\n500 400\n\n##Output description\n\nA Julia set with the desired resolution, in this case:\n\n[A link to the output picture](http://imgur.com/4nVcHVk)\n\n#Bonuses\n\n##Bonus #1\n\nThe band needs to upload in HD. Make your program fast enough to make wallpaper-sized pictures of 1920 x 1080 pixels with a reasonable iteration depth (128 or above).\n\n##Bonus #2\n\nMake your program accept an arbitrary function, f, instead of just f(x) = z^2 – 0.221 – 0.713 i. The right function can really make the shapes crazy!\n\n##Bonus #3\n\nBecause neighboring pixels can vary a lot in intensity (this is a property of the Julia sets!), the result looks a little pixelated. Implement some kind of [anti-alialising](https://en.wikipedia.org/wiki/Spatial_anti-aliasing) to make it look prettier.\n\n##Bonus #4\n\nThe problem is [embarrasingly parallel](https://en.wikipedia.org/wiki/Embarrassingly_parallel). There’s a lot of speed to gain by parallising your code!\n\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas\n\nThis challenge is posted by /u/Gobbedyret . All credits go to him/her"}, {:title=>"[2016-07-27] Challenge #277 [Intermediate] Fake coins", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4utlaz/20160727_challenge_277_intermediate_fake_coins/", :permalink=>"/r/dailyprogrammer/comments/4utlaz/20160727_challenge_277_intermediate_fake_coins/", :score=>73, :comments=>36, :description=>"#Description\n\nTheir are some false golden coins, wich are lighter then others, in the treasure chest. The assistant has weighed the coins, but can not figure out which are false and which are not.\n\n#Formal Inputs &amp; Outputs\n\n##Input description\n\nEach coin is labeled with a letter, and is put on the scale in groups or by itself.\nThe input consist of the coins on the left side, the coins on the right side and the way the scale tipped. This can be `left`, `right` or `equal` when the two sides wheigt the same. \n\n###Input 1\n\n    a b left\n    a c equal\n\n###Input 2\n\n    a c equal\n    \n###Input 3\n\n    a c equal\n    a b equal\n    c b left\n\n##Output description\n\nYou must determine which coins are lighter then the others.\n\n###Output 1\n\n    b is lighter\n    \nIt is possible that you can't determine this because you have not in enough info.\n\n###Output 2\n\n    no fake coins detected\n    \nAnd it is possible that the provided data has been inconsistent.\n\n###Output 3\n\n    data is inconsistent\n\n#Notes/Hints\n\n`left` means that the left side is heavier. Same goes for `right`...\n\n\n#Challenge input\n\n##1\n\n    ab xy left\n    b x equal\n    a b equal\n    \n##2\n\n    a x equal\n    b x equal\n    y a left\n   \n##3\n\n    abcd efgh equal\n    abci efjk left\n    abij efgl equal\n    mnopqrs tuvwxyz equal\n\n##4\n\n    abc efg equal\n    a e left\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas\n\n#Edit Notes\nYou can assume that there is only 1 fake coin, if not, the data is inconsistent.\nIf your solution worked without this assumption, you can leave it like that.\n\nAnd all real coins weight the same, just like the fake coins. But no real weight is necessary to complete the challenge"}, {:title=>"[2016-07-25] Challenge #277 [Easy] Simplifying fractions", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4uhqdb/20160725_challenge_277_easy_simplifying_fractions/", :permalink=>"/r/dailyprogrammer/comments/4uhqdb/20160725_challenge_277_easy_simplifying_fractions/", :score=>81, :comments=>172, :description=>"#Description\n\nA fraction exists of a numerator (top part) and a denominator (bottom part) as you probably all know.\n\nSimplifying (or reducing) fractions means to make the fraction as simple as possible. Meaning that the denominator is a close to `1` as possible.\nThis can be done by dividing the numerator and denominator by their greatest common divisor.\n\n#Formal Inputs &amp; Outputs\n\n##Input description\n\nYou will be given a list with 2 numbers seperator by a space.\nThe first is the numerator, the second the denominator\n\n    4 8\n    1536 78360\n    51478 5536\n    46410 119340\n    7673 4729\n    4096 1024\n\n##Output description\n\nThe most simplified numbers\n\n    1 2\n    64 3265\n    25739 2768\n    7 18\n    7673 4729\n    4 1\n\n#Notes/Hints\n\nMost languages have by default this kind of functionality, but if you want to challenge yourself, you should go back to the basic theory and implement it yourself.\n\n#Bonus\n\nInstead of using numbers, we could also use letters.\n\nFor instance\n\n    ab   a\n    __ = _\n    cb   c \n    \nAnd if you know that `x = cb`, then you would have this:\n\n    ab   a\n    __ = _\n    x    c  \n\nand offcourse:\n\n    a    1\n    __ = _\n    a    1\n\n    aa   a\n    __ = _\n    a    1\n    \nThe input will be first a number saying how many equations there are. And after the equations, you have the fractions.\n\nThe equations are a letter and a value seperated by a space.\nAn equation can have another equation in it.\n\n    3\n    x cb\n    y ab\n    z xa\n    ab cb\n    ab x\n    x y\n    z y\n    z xay\n\noutput:\n\n    a c\n    a c\n    c a\n    c 1\n    1 ab\n\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas"}, {:title=>"[2016-07-22] Challenge #276 [Hard] ∞ Loop solver part 2", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4u3e96/20160722_challenge_276_hard_loop_solver_part_2/", :permalink=>"/r/dailyprogrammer/comments/4u3e96/20160722_challenge_276_hard_loop_solver_part_2/", :score=>30, :comments=>7, :description=>"This is the same challenge as /u/jnazario's excellent [∞ Loop solver](https://www.reddit.com/r/dailyprogrammer/comments/4rug59/20160708_challenge_274_hard_loop_solver/) but for larger inputs.\n\nThe input format is different, as you will be given a presolved partial grid, where each cell is the possible rotations that line up with a possible rotation of neighbour cells.\n\nThe challenge is to find ALL of the valid grid solutions\n\n# 20x20 input visualization\n\n    ┌─┬─────┬────┬───────┬────┬───┬───┬────┬─────┬────────┬────┬────────┬────┬─────┬──┬──┬──┬──┬──┬──┐\n    │6│12   │6   │10     │10  │12 │6  │12  │6    │12      │6   │14      │12  │6    │10│10│10│14│14│12│\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │7│13   │3   │14     │12  │3  │9  │7   │15   │9       │5   │7       │11  │9    │6 │12│6 │13│5 │5 │\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │7│9    │6   │9      │7   │10 │10 │9   │7    │10      │13  │7       │10  │10   │9 │5 │5 │5 │3 │9 │\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │5│6    │15  │12     │5   │6  │14 │14  │15   │12      │5   │3       │10  │14   │10│11│11│15│10│12│\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │7│13   │3   │9      │3   │15 │11 │13  │7    │9       │7   │12      │6   │11   │10│10│10│9 │6 │9 │\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │7│11   │14  │14     │14  │9  │6  │15  │15   │12      │5   │3       │15  │14   │14│12│6 │12│3 │12│\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │5│6    │9   │3      │9   │6  │9  │5   │7    │13      │5   │6       │15  │15   │15│13│7 │13│6 │13│\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │5│5    │6   │10     │10  │13 │6  │15  │15   │11 13   │13 7│7 13 11 │11 7│11   │15│11│9 │3 │15│9 │\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │7│9    │5   │6      │10  │11 │9  │7   │9    │6 3     │11  │11 13 14│14 7│10   │11│14│12│6 │15│12│\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │5│6    │9   │3      │12  │6  │10 │9   │6    │13 11 14│6 12│14 7    │9   │6    │10│9 │7 │9 │5 │5 │\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │7│11   │14  │10     │9   │7  │10 │14  │13 11│7 14    │11  │11      │10  │13   │6 │14│9 │6 │13│5 │\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │7│12   │7   │12     │6   │13 │6  │9   │3 6  │13      │6   │10      │12  │7    │11│11│14│15│13│5 │\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │7│13 11│3 9 │11 13 7│13 7│3 9│9 3│6 12│14 7 │15      │11  │10      │9   │3    │14│10│9 │3 │9 │5 │\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │7│13 14│6 12│14 7   │11  │12 │6  │13  │5    │3       │14  │12      │6   │12   │5 │6 │14│14│12│5 │\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │5│3    │15  │11     │12  │7  │9  │7   │11   │12      │5   │7       │9   │7    │15│11│13│7 │13│5 │\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │5│6    │9   │6      │11  │13 │6  │13  │6    │15      │9   │7       │10  │13   │3 │10│9 │3 │15│13│\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │3│13   │6   │15     │12  │7  │15 │9   │3    │13      │6   │13 11   │6 12│11 7 │14│10│12│6 │15│9 │\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │6│13   │3   │11     │15  │15 │13 │6   │10   │15      │11  │11 14   │11  │14 11│13│6 │15│9 │3 │12│\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │7│11   │12  │6      │15  │9  │5  │7   │14   │9       │6   │14 13   │12 6│7 14 │9 │5 │7 │12│6 │13│\n    ├─┼─────┼────┼───────┼────┼───┼───┼────┼─────┼────────┼────┼────────┼────┼─────┼──┼──┼──┼──┼──┼──┤\n    │3│10   │9   │3      │11  │10 │11 │11  │11   │10      │9   │3       │11  │11   │10│11│11│9 │3 │9 │\n    └─┴─────┴────┴───────┴────┴───┴───┴────┴─────┴────────┴────┴────────┴────┴─────┴──┴──┴──┴──┴──┴──┘\n\n1. The numbers in each cell are indexes (0-based) into the looper tiles `╹╺┗╻┃┏┣╸┛━┻┓┫┳╋` (leading index 0 is space)\n\n2. The 4 digit binary representation of each index indicates whether there is a tick that points `WSEN`\n\n3. Cells with a single index are forced moves.  Cells with multiple indexes are potential moves.\n\n4. The general strategy for finding all valid final (ones with single indexes per cell) grids is to repeatedly split the grid based on one multiple cell (where each grid has a unique index in that cell), and then find all forced moves in each independent grid.\n\n5. A forced move by row is one where the left cells' East tick is equal to the right cell's West tick.  By column, the top cell's South tick is equal to the lower cell's North tick.\n\n**input**  (each row separated by LF, each cell by comma, each candidate by space)\n\n    20x20\n    6,12,6,10,10,12,6,12,6,12,6,14,12,6,10,10,10,14,14,12                \n    7,13,3,14,12,3,9,7,15,9,5,7,11,9,6,12,6,13,5,5                       \n    7,9,6,9,7,10,10,9,7,10,13,7,10,10,9,5,5,5,3,9                        \n    5,6,15,12,5,6,14,14,15,12,5,3,10,14,10,11,11,15,10,12                \n    7,13,3,9,3,15,11,13,7,9,7,12,6,11,10,10,10,9,6,9                     \n    7,11,14,14,14,9,6,15,15,12,5,3,15,14,14,12,6,12,3,12                 \n    5,6,9,3,9,6,9,5,7,13,5,6,15,15,15,13,7,13,6,13                       \n    5,5,6,10,10,13,6,15,15,11 13,13 7,7 13 11,11 7,11,15,11,9,3,15,9     \n    7,9,5,6,10,11,9,7,9,6 3,11,11 13 14,14 7,10,11,14,12,6,15,12         \n    5,6,9,3,12,6,10,9,6,13 11 14,6 12,14 7,9,6,10,9,7,9,5,5              \n    7,11,14,10,9,7,10,14,13 11,7 14,11,11,10,13,6,14,9,6,13,5            \n    7,12,7,12,6,13,6,9,3 6,13,6,10,12,7,11,11,14,15,13,5                 \n    7,13 11,3 9,11 13 7,13 7,3 9,9 3,6 12,14 7,15,11,10,9,3,14,10,9,3,9,5\n    7,13 14,6 12,14 7,11,12,6,13,5,3,14,12,6,12,5,6,14,14,12,5           \n    5,3,15,11,12,7,9,7,11,12,5,7,9,7,15,11,13,7,13,5                     \n    5,6,9,6,11,13,6,13,6,15,9,7,10,13,3,10,9,3,15,13                     \n    3,13,6,15,12,7,15,9,3,13,6,13 11,6 12,11 7,14,10,12,6,15,9           \n    6,13,3,11,15,15,13,6,10,15,11,11 14,11,14 11,13,6,15,9,3,12          \n    7,11,12,6,15,9,5,7,14,9,6,14 13,12 6,7 14,9,5,7,12,6,13              \n    3,10,9,3,11,10,11,11,11,10,9,3,11,11,10,11,11,9,3,9                  \n    \n\n**output**\n\nto save space just provide the number of distinct valid grids.  (I get 12)\n\n# 30x30 challenges\n\nthanks to /u/bearific for creating a generator for this challenge.  The above and larger inputs are available here:    \nhttps://gist.github.com/FrankRuis/0aa761b9562a32ea7fdcff32f1768eb0\n\n\"reduced input\" (above) formats of the 30x30 challenges:  (you may use the original input format and solve these anyway you like)\n\n**first input**\n\n    6,10,14,12,6,14,10,12,6,12,6,14,10,12,6,10,14,14,14,12,6,14,12,6,10,14,10,12,6,12                          \n    3,14,13,7,13,3,14,15,15,15,11,13,6,9,5,6,11,9,5,3,15,15,13,5,6,15,10,15,13,5                               \n    6,11,15,15,15,10,13 11,7 11,15,9,6,9,7,12,3,13,6,10,11,14,11,15,15,11,15,9,6,13,7,13                       \n    7,12,3,13,5,6,13 14,7 14,11,14,9,6,15,11,14,15,11,10,12,7,12,7,13 11,6 12,13 7,6 12,11 7,13,5,5            \n    7,11,14,9,3,9,7,13,6,15,14,13,5,6,9,3,10,10,13,3,15,13,3 6,15,15,11 13,14 7,13,5,5                         \n    7,14,13,6,14,12,5,7,15,15,9,3,9,5,6,12,6,14,9,6,15,13 11,6 12 3 9,9 3,7 13,14 7,15,13,7,9                  \n    7,15,13,5,5,3,9,5,5,5,6,14,14,9,3,11,11,13,6,15,15,13 14,7 11 14,14,15,15,15,11,11,12                      \n    7,11,9,5,7,12,6,13,3,13,3,13,3,10,10,10,14,11 7,9,5,3,11,13 14,7 11,15,11,11,10,12,5                       \n    5,6,10,9,5,5,5,7,12,5,6,9,6,12,6,14,13 11,6 12 3 9,12 6,7 13,12 6,6 12,9 3,7 14,15,10,12,6,15,13           \n    7,9,6,12,3,9,5,5,3,9,3,14,11 13,11 13 7,11 13 7,13 11 7,5 10,7 13 14,11 7,13,5,7,14,11,9,6,11,13,3,13      \n    5,6,11,9,6,12,3,13,6,14,14,13,6,10,14 11,11,11 14,13,6 3,15,11,15,9,6,12,7,10,9,6,13                       \n    3,11,10,10,9,3,10,15,9,7,15,13,5,6,13 14,6 12,14 13 7,9 3,7 13 14,11 7,14,9,6,11,13,3,12,6,11,9            \n    6,10,14,10,10,12,6,15,10,11 13,13 7,7 11,13,5,5,3,11,14,13,6 3,15,12,5,6,15,12,5,7,14,12                   \n    5,6,9,6,14,11,15,15,10,12 9,7,11 14,13,7,13,6,12,5,3,11 14,9,5,5,7,15,15,11,15,15,9                        \n    3,15,14,15,13,6,9,5,6,13 11 14,3 9,14 13 7,13 7,3 9,11 7,11,15,9,6,14 11,10,11,15,11 13,11 7,13,6,11,11,12 \n    6,15,15,15,11,15,14,11 13,13 7,7 14,12,3,15,10,12 9,6,9,6,11 13,11 7 14,10,12,3,14 13,14 7,15,11,12,6,13   \n    3,9,7,9,6,13 11,7 13 11,14 11 7,15,11,15,12,5,6,13 14,3 9,12 6,3 9,10 5,14 11 7,10,15,14,13,5,3,10,15,11,13\n    6,14,11,14,15,13 11 14,7 13 11 14,11 13 7 14,11 7,10,9,3,11,13,5,6,13,6,12 9,3 6,10,13,3,13,5,6,12,3,10,9  \n    3,13,6,13,3,13 14,7 13 14,14 13 11 7,14 11 7,14,12,6,10,9,5,5,3,15,11 13 14,14 7,10,13,6,15,11,13,5,6,10,12\n    6,15,9,3,14,9,7,13 14,7 14,15,11,11,10,12,3,15,12,3,14 13,9 3,6 12,11 7,13,7,10,11,11,15,12,5              \n    7,13,6,10,15,14,9,5,3,11,14,12,6,9,6,9,3,14,9,6,15,12 9,5,7,10,10,12,3,13,5                                \n    7,9,7,14,11,11,12,5,6,10,11,13,7,12,5,6,12,7,10,11,13 11,3 9 6 12,13 11 7,7 11,14,14,11,12,5,5             \n    5,6,13,7,12,6,13,5,3,14,14,13,3,15,11,11,11,13,6,12,7 13 14,10 5,11 7 14,9 12,3,15,14,11,11,13             \n    7,9,7,9,5,7,11,15,14,13,5,7,12,3,10,14,12,3,13 11,3 9,9 3,6 12 3 9,14 13 7,14 7,10,11,15,14,12,5           \n    7,12,3,10,11,15,14,11,9,3,9,3,15,12,6,13,3,10,13 14,6 12,12 6,7 14,11,15,14,12,3,13,5,5                    \n    3,9,6,10,12,7,9,6,14,10,12,6,13,7,15,15,12,6,9,7,15,11,12,3,13,3,12,3,9,5                                  \n    6,12,7,14,9,7,14,9,7,12,3,9,3,15,11 13,11 7,9,5,6,15,15,14,15,12,3,14,13,6,14,9                            \n    7,15,13,7,10,11,11,10,13,5,6,10,14,13,6 3,14 11,10,9,5,5,3,13,5,5,6,15,11,15,15,12                         \n    7,9,3,13,6,14,12,6,15,11,11,10,11,11,13 14,7 14,14,12,7,15,12,7,15,13,3,13,6,11,15,13                      \n    3,10,10,9,3,9,3,9,3,10,10,10,10,10,9,3,9,3,9,3,11,9,3,11,10,9,3,10,11,9                                    \n\n**input 2** \n\n    6,10,14,12,6,14,10,12,6,12,6,14,10,12,6,10,14,14,14,12,6,14,12,6,10,14,10,12,6,12                          \n    3,14,13,7,13,3,14,15,15,15,11,13,6,9,5,6,11,9,5,3,15,15,13,5,6,15,10,15,13,5                               \n    6,11,15,15,15,10,13 11,7 11,15,9,6,9,7,12,3,13,6,10,11,14,11,15,15,11,15,9,6,13,7,13                       \n    7,12,3,13,5,6,13 14,7 14,11,14,9,6,15,11,14,15,11,10,12,7,12,7,13 11,6 12,13 7,6 12,11 7,13,5,5            \n    7,11,14,9,3,9,7,13,6,15,14,13,5,6,9,3,10,10,13,3,15,13,3 6,15,15,13 11,14 7,13,5,5                         \n    7,14,13,6,14,12,5,7,15,15,9,3,9,5,6,12,6,14,9,6,15,11 13,12 6 9 3,3 9,13 7,7 14,15,13,7,9                  \n    7,15,13,5,5,3,9,5,5,5,6,14,14,9,3,11,11,13,6,15,15,14 13,11 7 14,14,15,15,15,11,11,12                      \n    7,11,9,5,7,12,6,13,3,13,3,13,3,10,10,10,14,11 7,9,5,3,11,14 13,11 7,15,11,11,10,12,5                       \n    5,6,10,9,5,5,5,7,12,5,6,9,6,12,6,14,13 11,6 12 3 9,12 6,7 13,12 6,6 12,9 3,14 7,15,10,12,6,15,13           \n    7,9,6,12,3,9,5,5,3,9,3,14,13 11,7 13 11,13 11 7,7 13 11,5 10,13 7 14,7 11,13,5,7,14,11,9,6,11,13,3,13      \n    5,6,11,9,6,12,3,13,6,14,14,13,6,10,11 14,11,11 14,13,6 3,15,11,15,9,6,12,7,10,9,6,13                       \n    3,11,10,10,9,3,10,15,9,7,15,13,5,6,14 13,12 6,14 7 13,9 3,7 13 14,11 7,14,9,6,11,13,3,12,6,11,9            \n    6,10,14,10,10,12,6,15,10,13 11,7 13,11 7,13,5,5,3,11,14,13,6 3,15,12,5,6,15,12,5,7,14,12                   \n    5,6,9,6,14,11,15,15,10,9 12,7,14 11,13,7,13,6,12,5,3,11 14,9,5,5,7,15,15,11,15,15,9                        \n    3,15,14,15,13,6,9,5,6,14 13 11,9 3,7 13 14,13 7,3 9,11 7,11,15,9,6,14 11,10,11,15,13 11,7 11,13,6,11,11,12 \n    6,15,15,15,11,15,14,13 11,7 13,7 14,12,3,15,10,12 9,6,9,6,13 11,7 11 14,10,12,3,13 14,7 14,15,11,12,6,13   \n    3,9,7,9,6,13 11,7 13 11,11 7 14,15,11,15,12,5,6,13 14,9 3,6 12,9 3,5 10,7 11 14,10,15,14,13,5,3,10,15,11,13\n    6,14,11,14,15,13 11 14,7 13 11 14,14 13 11 7,11 7,10,9,3,11,13,5,6,13,6,9 12,3 6,10,13,3,13,5,6,12,3,10,9  \n    3,13,6,13,3,13 14,7 13 14,13 11 7 14,14 7 11,14,12,6,10,9,5,5,3,15,14 13 11,14 7,10,13,6,15,11,13,5,6,10,12\n    6,15,9,3,14,9,7,13 14,7 14,15,11,11,10,12,3,15,12,3,13 14,3 9,12 6,7 11,13,7,10,11,11,15,12,5              \n    7,13,6,10,15,14,9,5,3,11,14,12,6,9,6,9,3,14,9,6,15,9 12,5,7,10,10,12,3,13,5                                \n    7,9,7,14,11,11,12,5,6,10,11,13,7,12,5,6,12,7,10,11,11 13,12 6 9 3,7 13 11,11 7,14,14,11,12,5,5             \n    5,6,13,7,12,6,13,5,3,14,14,13,3,15,11,11,11,13,6,12,14 13 7,5 10,11 7 14,12 9,3,15,14,11,11,13             \n    7,9,7,9,5,7,11,15,14,13,5,7,12,3,10,14,12,3,13 11,3 9,9 3,3 9 6 12,14 13 7,7 14,10,11,15,14,12,5           \n    7,12,3,10,11,15,14,11,9,3,9,3,15,12,6,13,3,10,13 14,6 12,12 6,14 7,11,15,14,12,3,13,5,5                    \n    3,9,6,10,12,7,9,6,14,10,12,6,13,7,15,15,12,6,9,7,15,11,12,3,13,3,12,3,9,5                                  \n    6,12,7,14,9,7,14,9,7,12,3,9,3,15,13 11,7 11,9,5,6,15,15,14,15,12,3,14,13,6,14,9                            \n    7,15,13,7,10,11,11,10,13,5,6,10,14,13,3 6,11 14,10,9,5,5,3,13,5,5,6,15,11,15,15,12                         \n    7,9,3,13,6,14,12,6,15,11,11,10,11,11,14 13,14 7,14,12,7,15,12,7,15,13,3,13,6,11,15,13                      \n    3,10,10,9,3,9,3,9,3,10,10,10,10,10,9,3,9,3,9,3,11,9,3,11,10,9,3,10,11,9          "}, {:title=>"[2016-07-20] Challenge #276 [Intermediate] Key function", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4tqy5c/20160720_challenge_276_intermediate_key_function/", :permalink=>"/r/dailyprogrammer/comments/4tqy5c/20160720_challenge_276_intermediate_key_function/", :score=>41, :comments=>67, :description=>"The key function is a higher order array function modelled in sql as `group by` and in J as `/.`  For each key, apply a passed function to the entire subarray of items that share the same key.\n\n#function signature\n\nkey(\n\n     elements:  an array/list of stuff. number of items is leading array dimension,\n     key: an array/list of stuff.  Same amount of items as \"elements\".  If null, then defaults to same array as elements,\n     applyfunction:  function that will be called for each group of elements that have the same key.  Optionally, this function could also have the key parameter.  Results are aggregated in order of key appearance.\n     )\n\nkey(`3 4 5 6` , `2 0 1 2` , `sum`)\n\nwould produce\n\n`9 4 5`\n\nThere are 2 elements with key 2, and so for key 2, sum is called with `3 6`.  Results accumulated in order of key seen.\n\n# 1. Histogram\n\nfor each item in input, return a record with the key and the item count for that key\n\n**input:**\n\n     5 3 5 2 2 9 7 0 7 5 9 2 9 1 9 9 6 6 8 5 1 1 4 8 5 0 3 5 8 2 3 8 3 4 6 4 9 3 4 3 4 5 9 9 9 7 7 1 9 3 4 6 6 8 8 0 4 0 6 3 2 6 3 2 3 5 7 4 2 6 7 3 9 5 7 8 9 5 6 5 6 8 3 1 8 4 6 5 6 4 8 9 5 7 8 4 4 9 2 6 10\n\n**output** \n\n     5 13\n     3 12\n     2  8\n     9 14\n     7  8\n     0  4\n     1  5\n     6 13\n     8 11\n     4 12\n    10  1\n\n\n# 2. grouped sum of field\n\nfor each record use the first field as key, and return key and sum of field 2 (grouped by key)\n\n**input:**\n\n    a 14\n    b 21\n    c 82\n    d 85\n    a 54\n    b 96\n    c 9 \n    d 61\n    a 43\n    b 49\n    c 16\n    d 34\n    a 73\n    b 59\n    c 36\n    d 24\n    a 45\n    b 89\n    c 77\n    d 68\n\n**output:**\n\n    ┌─┬───┐\n    │a│229│\n    ├─┼───┤\n    │b│314│\n    ├─┼───┤\n    │c│220│\n    ├─┼───┤\n    │d│272│\n    └─┴───┘\n\n\n# 3. nub (easier)\n\nthe \"nub of an array\" can be implemented with key.  It is similar to sql first function. \n\nfor the input from `2.` return the first element keyed (grouped) by first column\n\n**output:**\n\n      (&gt;@{.\"1 ({./.) ]) b\n    ┌─┬──┐\n    │a│14│\n    ├─┼──┤\n    │b│21│\n    ├─┼──┤\n    │c│82│\n    ├─┼──┤\n    │d│85│\n    └─┴──┘\n\n#note\n\nI will upvote if you write a key function that functionally returns an array/list.  (spirit of challenge is not to shortcut through actual data inputs)"}, {:title=>"[2016-07-18] Challenge #276 [Easy] Recktangles", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4tetif/20160718_challenge_276_easy_recktangles/", :permalink=>"/r/dailyprogrammer/comments/4tetif/20160718_challenge_276_easy_recktangles/", :score=>123, :comments=>129, :description=>"#Description\n\nThere is a crisis unfolding in Reddit. For many years, Redditors have continued to evolve sh\\*tposting to new highs, but it seems progress has slowed in recent times. Your mission, should you choose to accept it, is to create a state of the art rektangular sh\\*tpost generator and bring sh\\*tposting into the 21st century.\n\nGiven a word, a width and a length, you must print a rektangle with the word of the given dimensions.\n\n#Formal Inputs &amp;amp; Outputs\n\n##Input description\n\nThe input is a string `word`, a `width` and a `height`\n\n##Output description\n\nQuality rektangles. See examples. Any orientation of the rektangle is acceptable\n\n##Examples\n\n*  *Input*: \"REKT\", width=1, height=1\n\n    *Output*: \n\n        R E K T\n        E     K\n        K     E\n        T K E R\n\n* *Input*: \"REKT\", width=2, height=2\n   \n    *Output*:\n      \n        T K E R E K T\n        K     E     K          \n        E     K     E\n        R E K T K E R\n        E     K     E\n        K     E     K\n        T K E R E K T\n\n#Notes/Hints\n\nNone\n\n#Bonus\n\nMany fun bonuses possible - the more ways you can squeeze REKT into different shapes, the better.\n\n* Print rektangles rotated by 45 degrees.\n\n* Print words in other shapes (? surprise me)\n\n* Creatively colored output? Rainbow rektangles would be glorious.\n\n# Credit\n\nThis challenge was submitted by /u/stonerbobo\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas. Thank you!"}, {:title=>"[2016-07-15] Challenge #275 [Hard] Splurthian Chemistry 103", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4t11c3/20160715_challenge_275_hard_splurthian_chemistry/", :permalink=>"/r/dailyprogrammer/comments/4t11c3/20160715_challenge_275_hard_splurthian_chemistry/", :score=>42, :comments=>16, :description=>"# Background\n\nThe Splurth Council for Atoms and Atom-Related Paraphernalia has erupted into bickering, with everyone having an opinion on how to build the periodic table. Abcder the Wise demands alphabetical ordering, Zyxwur the Comely wants reverse-alphabetical, and Gsvpnnhq the Random really wants to pick the names. Can you make everyone happy?\n\n[See Wednesday's Intermediate challenge for the preference procedure of element symbols in Splurthian Chemistry.](https://www.reddit.com/r/dailyprogrammer/comments/4so25w/20160713_challenge_275_intermediate_splurthian/) You can ignore capital letters for the purpose of this challenge.\n\n# Requirements\n\nToday's Hard challenge is an optimization problem. [Here is a list of 10,000 random 8-character strings.](http://pastebin.com/raw/uQKZWbR4) These are candidate element names. You must select some subset of (up to 676) distinct items from this list. The requirements are:\n\n* Every item on your submitted list *must* appear in the candidate list.\n* The items on your submitted list *must* be in alphabetical order.\n* Your submitted list *must* be able to be assigned symbols, in order, using the preference procedure in Wednesday's Intermediate challenge (i.e. each element is assigned its most preferred symbol that's still available).\n\nPost a link to your list on pastebin or github or Google docs or somewhere. Also post the code you used to generate your list, along with your score.\n\n# Scoring\n\nYour score is as follows: assign each element a symbol using the process in Wednesday's challenge. Reverse the list of symbols you get. Your score is the number of symbols *at the beginning of the reversed list* that are in alphabetical order.\n\n# Example scoring\n\n[Here is a valid submission list](http://pastebin.com/raw/XX7d3dx3) that I generated. The first and last few entries are:\n\n    aabmevmt\n    abhhwzpo\n    aehwwogz\n    afbvhlke\n    afycbvxv\n    agfigxja\n    agxdnjyc\n    ....\n    xoyittxg\n    xrlkgqbe\n    xxutzias\n    ycykczyb\n    ygnoizht\n    yivqpvmj\n    yjhamdhh\n\nAssigning each of these a symbol, using the preference procedure, we get:\n\n    aabmevmt aa\n    abhhwzpo ab\n    aehwwogz ae\n    afbvhlke af\n    afycbvxv ay\n    agfigxja ag\n    agxdnjyc ax\n    ....\n    xoyittxg yi\n    xrlkgqbe lb\n    xxutzias zi\n    ycykczyb yy\n    ygnoizht yn\n    yivqpvmj ym\n    yjhamdhh jm\n\nNow, reverse the list of symbols. This starts:\n\n    jm ym yn yy zi lb yi ...\n\nThe first 5 symbols on this reversed list (`jm`, `ym`, `yn`, `yy`, and `zi`) are in alphabetical order. However, the sixth symbol (`lb`) comes before the fifth symbol in alphabetical order. Thus my score is 5. How high can you get?\n\n# Verification script\n\n[Here is a Python script you can use](http://pastebin.com/yX9hs0We) to make sure your submission is valid and to compute your score."}, {:title=>"[2016-07-13] Challenge #275 [Intermediate] Splurthian Chemistry 102", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4so25w/20160713_challenge_275_intermediate_splurthian/", :permalink=>"/r/dailyprogrammer/comments/4so25w/20160713_challenge_275_intermediate_splurthian/", :score=>47, :comments=>72, :description=>"# Description\n\n[See Monday's Easy challenge for the rules of element symbols in Splurthian Chemistry.](https://www.reddit.com/r/dailyprogrammer/comments/4savyr/20160711_challenge_275_easy_splurthian_chemistry/)\n\nThe Splurth Council of Atoms and Atom-Related Paraphernalia has decided to keep their current naming conventions, as listed in the Easy challenge, but to add a preference system. So while there are still 6 valid symbols for the element Iron, the preferred symbol is `Ir`. The second-most preferred symbol is `Io`, then `In`, `Ro`, `Rn`, and finally `On`. A symbol is preferred based on how early in the element name its first letter is, followed by how early its second letter is.\n\nIn the case of repeated letters like in `Neon`, `Eo` is preferred to `En`, even though an `n` is closer to the beginning of `Neon` than the `o` is. This is because it's the second `n` that's used in the symbol `En`, since the second letter in the symbol must appear after the first.\n\nWhen the Council receives a new element to add to the table, it chooses the most preferred valid symbol for that element that's not already taken by another element. For instance, if Chlorine were the first element added, then it would get the symbol `Ch`. If Chromium was added later, it would get the symbol `Cr`. If Cesium and Cerium were then added, they would get the symbols `Ce` and `Ci`. If there are no valid symbols for the new element.... well, that's why the Council needs you.\n\n# Details and examples\n\nThe Council has decided to wipe the table clean and start afresh. The list of [all 366 elements known to Splurthians](http://pastebin.com/raw/uVyHtMRb) are set to be assigned a symbol, one by one, in the order in that text file, following the preference rules above.\n\nDetermine the symbol assigned to each element in the list. For instance, you should find that Protactinium is assigned `Pt`, Californium is assigned `Cf`, and Lionium is assigned `Iu`.\n\nFind the first element that will not be able to have a symbol assigned, because when you get to it all the valid symbols for it are taken. (You can stop assigning symbols at this point if you like.) Post this element along with your solution, as a check.\n\n# Optional bonus challenge\n\nFind a way to reorder the elements so that it's possible to get through the entire list, using the preference rules above. Post a link to your reordered list. There are many possible answers."}, {:title=>"[2016-07-11] Challenge #275 [Easy] Splurthian Chemistry 101", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4savyr/20160711_challenge_275_easy_splurthian_chemistry/", :permalink=>"/r/dailyprogrammer/comments/4savyr/20160711_challenge_275_easy_splurthian_chemistry/", :score=>84, :comments=>213, :description=>"# Description\n\nThe inhabitants of the planet Splurth are building their own [periodic table of the elements](https://en.wikipedia.org/wiki/Periodic_table#Overview). Just like Earth's periodic table has a chemical symbol for each element (`H` for Hydrogen, `Li` for Lithium, etc.), so does Splurth's. However, their chemical symbols must follow certain rules:\n\n1. All chemical symbols must be exactly two letters, so `B` is not a valid symbol for Boron.\n2. Both letters in the symbol must appear in the element name, but the first letter of the element name does not necessarily need to appear in the symbol. So `Hg` is not valid for Mercury, but `Cy` is.\n3. The two letters must appear in order in the element name. So `Vr` is valid for Silver, but `Rv` is not. To be clear, both `Ma` and `Am` are valid for Magnesium, because there is both an `a` that appears after an `m`, and an `m` that appears after an `a`.\n4. If the two letters in the symbol are the same, it must appear twice in the element name. So `Nn` is valid for Xenon, but `Xx` and `Oo` are not.\n\nAs a member of the Splurth Council of Atoms and Atom-Related Paraphernalia, you must determine whether a proposed chemical symbol fits these rules.\n\n# Details\n\nWrite a function that, given two strings, one an element name and one a proposed symbol for that element, determines whether the symbol follows the rules. If you like, you may parse the program's input and output the result, but this is not necessary.\n\nThe symbol will have exactly two letters. Both element name and symbol will contain only the letters a-z. Both the element name and the symbol will have their first letter capitalized, with the rest lowercase. (If you find that too challenging, it's okay to instead assume that both will be completely lowercase.)\n\n# Examples\n\n    Spenglerium, Ee -&gt; true\n    Zeddemorium, Zr -&gt; true\n    Venkmine, Kn -&gt; true\n    Stantzon, Zt -&gt; false\n    Melintzum, Nn -&gt; false\n    Tullium, Ty -&gt; false\n\n# Optional bonus challenges\n\n1. Given an element name, find the valid symbol for that name that's first in alphabetical order. E.g. `Gozerium -&gt; Ei`, `Slimyrine -&gt; Ie`.\n2. Given an element name, find the number of distinct valid symbols for that name. E.g. `Zuulon -&gt; 11`.\n3. The planet Blurth has similar symbol rules to Splurth, but symbols can be any length, from 1 character to the entire length of the element name. Valid Blurthian symbols for `Zuulon` include `N`, `Uuo`, and `Zuuln`. Complete challenge #2 for the rules of Blurth. E.g. `Zuulon -&gt; 47`."}, {:title=>"[2016-07-08] Challenge #274 [Hard] ∞ Loop solver", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4rug59/20160708_challenge_274_hard_loop_solver/", :permalink=>"/r/dailyprogrammer/comments/4rug59/20160708_challenge_274_hard_loop_solver/", :score=>66, :comments=>50, :description=>"#Description\n\n∞ Loop is a mobile game that consists of n\\*m tiles, placed in a n\\*m grid. There are 16 different tiles:\n\n┃, ━, ┏, ┓, ┛, ┗, ┣, ┳, ┫, ┻, ╋, ╹, ╺, ╻, ╸, and the empty tile.\n\n(If some of the Unicode characters aren't shown, [here](http://i.imgur.com/PWyeW5r.png) is a screenshot of this paragraph).\n\nIn other words, every tile may or may not have a \"pipe\" going up, a \"pipe\" going right, a \"pipe\" going down, and a \"pipe\" going left. All combinations of those are valid, legal tiles.\n\nAt the beginning of the game, the grid is filled with those tiles. The player may then choose some tile and rotate it 90 degrees to the right. The player may do this an unlimited amount of times. For example, ┣ becomes ┳ and ┛ becomes ┗, but ╋ stays ╋.\n\nThe objective is to create a closed loop: every pipe must have another tile facing it in the adjacent tile — for example if some tile has a pipe going right, its adjacent tile to the right must have a pipe going left. \n\nIn case you need clarification, [here's](https://www.youtube.com/watch?v=TlR1hfiIk10) some random guy playing it.\n\nYour task is to write a program that, given an initial grid of tiles, outputs a solution to that grid.\n\n#Formal Inputs &amp;amp; Outputs\n\nAn easy way to represent tiles without having to deal with Unicode (or ASCII art) is to use the bitmask technique to encode the tiles as numbers 0...15. \n\nTo encode a tile:  \n\n* Start with 0.  \n\n* If the tile has a pipe going up, add 1.  \n\n* If the tile has a pipe going right, add 2.  \n\n* If the tile has a pipe going down, add 4.  \n\n* If the tile has a pipe going left, add 8.  \n\nFor example, ┫ becomes 1+4+8=13.\n\nIf we look at the binary representation of that number, we see that:  \n\n* The first digit from the right shows whether the tile has a pipe going up;  \n\n* The second digit from the right shows whether the tile has a pipe going right;   \n\n* The third digit from the right shows whether the tile has a pipe going down;  \n\n* The fourth digit from the right shows whether the tile has a pipe going left.  \n\n13 in binary is 1101, from which it is evident that all pipes are present except the pipe going right.\n\n##Input description\n\nThe input consists of n rows, each row having m space-separated numbers in it. Those numbers are the tiles, encoded in the bitmask technique discussed above.\n\nYou may also include the number of rows and columns in the input, if that makes it easier to read the input.\n\n##Output description\n\nOutput a similar grid which is obtained by rotating some or all tiles in the input grid. A tile may be rotated multiple times. The output grid must be a closed loop.\n\n##Sample input 1\n\n    9 12 12 6\n    10 13 13 5\n    3 3 9 3\n\n##Sample output 1\n\n    6 12 6 12\n    5 7 13 5\n    3 9 3 9\n\nThe sample input corresponds to:\n\n    ┛┓┓┏\n    ━┫┫┃\n    ┗┗┛┗\n\nBy rotating some tiles, we get:\n\n    ┏┓┏┓\n    ┃┣┫┃\n    ┗┛┗┛,\n\nwhich corresponds to the sample output and is a closed loop.\n\n(Again, if Unicode characters don't load, [here](http://i.imgur.com/lqCGY3e.png) is the first sample input).\n\n##Sample input 2\n\n    0 8 8 0\n\n##Sample output 2\n\n    0 2 8 0\n\nThe input corresponds to ╸╸, surrounded by two empty tiles.  \nThe corresponding output is ╺╸.\n\n#Notes\n\nIt is easiest to use the bitwise and/or/xor operators to rotate and check for pipes. Most programming languages have such operators. The bitwise shift operators may also be helpful to rotate the tiles. [Here's](https://en.wikipedia.org/wiki/Mask_(computing\\)) a Wikipedia article on using them on bitmasks.\n\n#Finally\n\nThis challenge was suggested by /u/A858DE57B86C2F16F, many thanks! Have a good challenge idea?   Consider submitting it to /r/dailyprogrammer_ideas"}, {:title=>"[2016-07-06] Challenge #274 [Intermediate] Calculating De Bruijn sequences", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4riubi/20160706_challenge_274_intermediate_calculating/", :permalink=>"/r/dailyprogrammer/comments/4riubi/20160706_challenge_274_intermediate_calculating/", :score=>41, :comments=>16, :description=>"# Description\n\nIn combinatorial mathematics, a *k-ary* De Bruijn sequence *B(k, n)* of order *n*, named after the Dutch mathematician Nicolaas Govert de Bruijn, is a cyclic sequence of a given alphabet *A* with size *k* for which every possible subsequence of length *n* in *A* appears as a sequence of consecutive characters exactly once. At the terminus, you \"wrap\" the end of the sequence around to the beginning to get any remaining subsequences. \n\nEach *B(k, n)* has length *k^n*.\n\nA De Bruijn sequence *B(2, 3)* (with alphabet *0* and *1*) is therefore:\n\n    00010111\n\nSimilarly, *B(\"abcd\", 2)* (with alphabet \"a\", \"b\", \"c\", and \"d\") is therefore:\n\n    aabacadbbcbdccdd\n\nFor those sequences of length, every trigram (for the former case) or bigram (for the latter case) is represented in the result. \n\nDe Bruijn sequences have various applications, including in PIN pad testing and rotor angle calculation. \n\n# Input Description\n\nYou'll be given two inputs *k* and *n*, the first is an integer or a a string of unique characters, the second is the length of the subsequences to ensure are encoded.\n\n# Output Description\n\nYour program should emit a string that encodes the De Bruijn sequence.\n\n# Input\n\n    5 3\n    2 4\n    abcde 4\n\n# Output\n\nThe outputs expected for those (in order) are:\n\n    00010020030040110120130140210220230240310320330340410420430441112113114122123124132133134142143144222322423323424324433343444\n    0000100110101111\n    aaaabaaacaaadaaaeaabbaabcaabdaabeaacbaaccaacdaaceaadbaadcaaddaadeaaebaaecaaedaaeeababacabadabaeabbbabbcabbdabbeabcbabccabcdabceabdbabdcabddabdeabebabecabedabeeacacadacaeacbbacbcacbdacbeaccbacccaccdacceacdbacdcacddacdeacebacecacedaceeadadaeadbbadbcadbdadbeadcbadccadcdadceaddbaddcadddaddeadebadecadedadeeaeaebbaebcaebdaebeaecbaeccaecdaeceaedbaedcaeddaedeaeebaeecaeedaeeebbbbcbbbdbbbebbccbbcdbbcebbdcbbddbbdebbecbbedbbeebcbcbdbcbebcccbccdbccebcdcbcddbcdebcecbcedbceebdbdbebdccbdcdbdcebddcbdddbddebdecbdedbdeebebeccbecdbecebedcbeddbedebeecbeedbeeeccccdccceccddccdeccedcceecdcdcecdddcddecdedcdeececeddcedeceedceeeddddeddeededeeee\n"}, {:title=>"[2016-07-04] Challenge #274 [Easy] Gold and Treasure: The Beale Cipher", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4r8fod/20160704_challenge_274_easy_gold_and_treasure_the/", :permalink=>"/r/dailyprogrammer/comments/4r8fod/20160704_challenge_274_easy_gold_and_treasure_the/", :score=>50, :comments=>116, :description=>"Today's challenge was specially chosen for the US Fourth of July holiday. \n\n# Description\n\nIn 1885, an author named James B. Ward published a pamphlet telling of a long-lost treasure available to anyone clever enough to solve the puzzle associated with it. Ward reported that around 1817, a man named Thomas Jefferson Beale stumbled upon gold and silver deposits in what is now Colorado. Agreeing to keep it all a secret, Beale’s team had spent the better part of two years quietly mining, then had taken the metals to Virginia by wagon and buried them in a vault underground between 1819 and 1821. Beale had written three notes explaining where the treasure was and who had legal rights to shares in it, encrypting each of these using a different text.\n\nEventually, the second of the three texts was deciphered using a slightly altered version of the Declaration of Independence. Each number in the text corresponded to a word in the U.S. Declaration of Independence. The first letter of each of those words spelled the plaintext—with a few modifications for errors and spelling.\n\nYour mission today is to go treasure hunting and to write a program to decipher Beale's message. \n\n## DECLARATION OF INDEPENDENCE\n\n&gt; When in the course of human events it becomes necessary for one people to dissolve the political bands which have connected them with another and to assume among the powers of the earth the separate and equal station to which the laws of nature and of nature's god entitle them a decent respect to the opinions of mankind requires that they should declare the causes which impel them to the separation we hold these truths to be self evident that all men are created equal that they are endowed by their creator with certain unalienable rights that among these are life liberty and the pursuit of happiness that to secure these rights governments are instituted among men deriving their just powers from the consent of the governed that whenever any form of government becomes destructive of these ends it is the right of the people to alter or to abolish it and to institute new government laying its foundation on such principles and organizing its powers in such form as to them shall seem most likely to effect their safety and happiness prudence indeed will dictate that governments long established should not be changed for light and transient causes and accordingly all experience hath shown that mankind are more disposed to suffer while evils are sufferable than to right themselves by abolishing the forms to which they are accustomed but when a long train of abuses and usurpations pursuing invariably the same object evinces a design to reduce them under absolute despotism it is their right it is their duty to throw off such government and to provide new guards for their future security such has been the patient sufferance of these colonies and such is now the necessity which constrains them to alter their former systems of government the history of the present king of great Britain is a history of repeated injuries and usurpations all having in direct object the establishment of an absolute tyranny over these states to prove this let facts be submitted to a candid world he has refused his assent to laws the most wholesome and necessary for the public good he has forbidden his governors to pass laws of immediate and pressing importance unless suspended in their operation till his assent should be obtained and when so suspended he has utterly neglected to attend to them he has refused to pass other laws for the accommodation of large districts of people unless those people would relinquish the right of representation in the legislature a right inestimable to them and formidable to tyrants only he has called together legislative bodies at places unusual uncomfortable and distant from the depository of their public records for the sole purpose of fatiguing them into compliance with his measures he has dissolved representative houses repeatedly for opposing with manly firmness his invasions on the rights of the people he has refused for a long time after such dissolutions to cause others to be elected whereby the legislative powers incapable of annihilation have returned to the people at large for their exercise the state remaining in the meantime exposed to all the dangers of invasion from without and convulsions within he has endeavored to prevent the population of these states for that purpose obstructing the laws for naturalization of foreigners refusing to pass others to encourage their migration hither and raising the conditions of new appropriations of lands he has obstructed the administration of justice by refusing his assent to laws for establishing judiciary powers he has made judges dependent on his will alone for the tenure of their offices and the amount and payment of their salaries he has erected a multitude of new offices and sent hither swarms of officers to harass our people and eat out their substance he has kept among us in times of peace standing armies without the consent of our legislatures he has affected to render the military independent of and superior to the civil power he has combined with others to subject us to a jurisdiction foreign to our constitution and unacknowledged by our laws giving his assent to their acts of pretended legislation for quartering large bodies of armed troops among us for protecting them by a mock trial from punishment for any murders which they should commit on the inhabitants of these states for cutting off our trade with all parts of the world for imposing taxes on us without our consent for depriving us in many cases of the benefits of trial by jury for transporting us beyond seas to be tried for pretended offenses for abolishing the free system of English laws in a neighboring province establishing therein an arbitrary government and enlarging its boundaries so as to render it at once an example and fit instrument for introducing the same absolute rule into these colonies for taking away our charters abolishing our most valuable laws and altering fundamentally the forms of our governments for suspending our own legislature and declaring themselves invested with power to legislate for us in all cases whatsoever he has abdicated government here by declaring us out of his protection and waging war against us he has plundered our seas ravaged our coasts burnt our towns and destroyed the lives of our people he is at this time transporting large armies of foreign mercenaries to complete the works of death desolation and tyranny already begun with circumstances of cruelty and perfidy scarcely paralleled in the most barbarous ages and totally unworthy the head of a civilized nation he has constrained our fellow citizens taken captive on the high seas to bear arms against their country to become the executioners of their friends and brethren or to fall themselves by their hands he has excited domestic insurrections amongst us and has endeavored to bring on the inhabitants of our frontiers the merciless Indian savages whose known rule of warfare is an undistinguished destruction of all ages sexes and conditions in every stage of these oppressions we have petitioned for redress in the most humble terms our repeated petitions have been answered only by repeated injury a prince whole character is thus marked by every act which may define a tyrant is unfit to be the ruler of a free people nor have we been wanting in attention to our British brethren we have warned them from time to time of attempts by their legislature to extend an unwarrantable jurisdiction over us we have reminded them of the circumstances of our emigration and settlement here we have appealed to their native justice and magnanimity and we have conjured them by the ties of our common kindred to disavow these usurpations which would inevitably interrupt our connections and correspondence they too have been deaf to the voice of justice and of consanguinity we must therefore acquiesce in the necessity which denounces our separation and hold them as we hold the rest of mankind enemies in war in peace friends we therefore the representatives of the united states of America in general congress assembled appealing to the supreme judge of the world for the rectitude of our intentions do in the name and by authority of the good people of these colonies solemnly publish and declare that these united colonies are and of right ought to be free and independent states that they are absolved from all allegiance to the British crown and that all political connection between them and the state of great Britain is and ought to be totally dissolved and that as free and independent states they have full power to levy war conclude peace contract alliances establish commerce and to do all other acts and things which independent states may of right do and for the support of this declaration with a firm reliance on the protection of divine providence we mutually pledge to each other our lives our fortunes and our sacred honor .\n\n# Input Description\n\nYou'll be given a list of numbers, comma separated, representing the ciphertext given by Beale. Example:\n\n115, 73, 24, 807, 37, 52, 49, 17, 31, 62, 647, 22, 7, 15, 140, 47, 29, 107, 79, 84, 56, 239, 10, 26, 811, 5, 196, 308, 85, 52, 160, 136, 59, 211, 36, 9, 46, 316, 554, 122, 106, 95, 53, 58, 2, 42, 7, 35, 122, 53, 31, 82, 77, 250, 196, 56, 96, 118, 71, 140, 287, 28, 353, 37, 1005, 65, 147, 807, 24, 3, 8, 12, 47, 43, 59, 807, 45, 316, 101, 41, 78, 154, 1005, 122, 138, 191, 16, 77, 49, 102, 57, 72, 34, 73, 85, 35, 371, 59, 196, 81, 92, 191, 106, 273, 60, 394, 620, 270, 220, 106, 388, 287, 63, 3, 6, 191, 122, 43, 234, 400, 106, 290, 314, 47, 48, 81, 96, 26, 115, 92, 158, 191, 110, 77, 85, 197, 46, 10, 113, 140, 353, 48, 120, 106, 2, 607, 61, 420, 811, 29, 125, 14, 20, 37, 105, 28, 248, 16, 159, 7, 35, 19, 301, 125, 110, 486, 287, 98, 117, 511, 62, 51, 220, 37, 113, 140, 807, 138, 540, 8, 44, 287, 388, 117, 18, 79, 344, 34, 20, 59, 511, 548, 107, 603, 220, 7, 66, 154, 41, 20, 50, 6, 575, 122, 154, 248, 110, 61, 52, 33, 30, 5, 38, 8, 14, 84, 57, 540, 217, 115, 71, 29, 84, 63, 43, 131, 29, 138, 47, 73, 239, 540, 52, 53, 79, 118, 51, 44, 63, 196, 12, 239, 112, 3, 49, 79, 353, 105, 56, 371, 557, 211, 505, 125, 360, 133, 143, 101, 15, 284, 540, 252, 14, 205, 140, 344, 26, 811, 138, 115, 48, 73, 34, 205, 316, 607, 63, 220, 7, 52, 150, 44, 52, 16, 40, 37, 158, 807, 37, 121, 12, 95, 10, 15, 35, 12, 131, 62, 115, 102, 807, 49, 53, 135, 138, 30, 31, 62, 67, 41, 85, 63, 10, 106, 807, 138, 8, 113, 20, 32, 33, 37, 353, 287, 140, 47, 85, 50, 37, 49, 47, 64, 6, 7, 71, 33, 4, 43, 47, 63, 1, 27, 600, 208, 230, 15, 191, 246, 85, 94, 511, 2, 270, 20, 39, 7, 33, 44, 22, 40, 7, 10, 3, 811, 106, 44, 486, 230, 353, 211, 200, 31, 10, 38, 140, 297, 61, 603, 320, 302, 666, 287, 2, 44, 33, 32, 511, 548, 10, 6, 250, 557, 246, 53, 37, 52, 83, 47, 320, 38, 33, 807, 7, 44, 30, 31, 250, 10, 15, 35, 106, 160, 113, 31, 102, 406, 230, 540, 320, 29, 66, 33, 101, 807, 138, 301, 316, 353, 320, 220, 37, 52, 28, 540, 320, 33, 8, 48, 107, 50, 811, 7, 2, 113, 73, 16, 125, 11, 110, 67, 102, 807, 33, 59, 81, 158, 38, 43, 581, 138, 19, 85, 400, 38, 43, 77, 14, 27, 8, 47, 138, 63, 140, 44, 35, 22, 177, 106, 250, 314, 217, 2, 10, 7, 1005, 4, 20, 25, 44, 48, 7, 26, 46, 110, 230, 807, 191, 34, 112, 147, 44, 110, 121, 125, 96, 41, 51, 50, 140, 56, 47, 152, 540, 63, 807, 28, 42, 250, 138, 582, 98, 643, 32, 107, 140, 112, 26, 85, 138, 540, 53, 20, 125, 371, 38, 36, 10, 52, 118, 136, 102, 420, 150, 112, 71, 14, 20, 7, 24, 18, 12, 807, 37, 67, 110, 62, 33, 21, 95, 220, 511, 102, 811, 30, 83, 84, 305, 620, 15, 2, 10, 8, 220, 106, 353, 105, 106, 60, 275, 72, 8, 50, 205, 185, 112, 125, 540, 65, 106, 807, 138, 96, 110, 16, 73, 33, 807, 150, 409, 400, 50, 154, 285, 96, 106, 316, 270, 205, 101, 811, 400, 8, 44, 37, 52, 40, 241, 34, 205, 38, 16, 46, 47, 85, 24, 44, 15, 64, 73, 138, 807, 85, 78, 110, 33, 420, 505, 53, 37, 38, 22, 31, 10, 110, 106, 101, 140, 15, 38, 3, 5, 44, 7, 98, 287, 135, 150, 96, 33, 84, 125, 807, 191, 96, 511, 118, 40, 370, 643, 466, 106, 41, 107, 603, 220, 275, 30, 150, 105, 49, 53, 287, 250, 208, 134, 7, 53, 12, 47, 85, 63, 138, 110, 21, 112, 140, 485, 486, 505, 14, 73, 84, 575, 1005, 150, 200, 16, 42, 5, 4, 25, 42, 8, 16, 811, 125, 160, 32, 205, 603, 807, 81, 96, 405, 41, 600, 136, 14, 20, 28, 26, 353, 302, 246, 8, 131, 160, 140, 84, 440, 42, 16, 811, 40, 67, 101, 102, 194, 138, 205, 51, 63, 241, 540, 122, 8, 10, 63, 140, 47, 48, 140, 288\n\n# Output Description\n\nYour program should consume the input and decrypt it. Remember - the first letter of that word number from the US Declaration of Independence. Spacing, punctuation, capitalization, and fixing spelling is left as an exercise to the treasure seeker (as Beale intended). The above letter was intended to decrypt to:\n\n*I have deposited in the county of Bedford, about four miles from Buford's, in an excavation or vault, six feet below the surface of the ground, the following articles, belonging jointly to the parties whose names are given in number \"3,\" herewith:*\n\n*The first deposit consisted of one thousand and fourteen pounds of gold, and three thousand eight hundred and twelve pounds of silver, deposited November, 1819. The second was made December, 1821, and consisted of nineteen hundred and seven pounds of gold, and twelve hundred and eighty-eight pounds of silver; also jewels, obtained in St. Louis in exchange for silver to save transportation, and valued at $13,000.*\n\n*The above is securely packed in iron pots, with iron covers. The vault is roughly lined with stone, and the vessels rest on solid stone, and are covered with others. Paper number \"1\" describes the exact locality of the vault so that no difficulty will be had in finding it.*\n\n# Notes\n\nBeale counts the first word as index \"1\", not \"0\" - a difference from most computer programming languages. Account for that.\n\nThere are 1322 words in the above Declaration of Independence. If you see a number larger than that, wrap around. \n\nThe inspiration for this challenge comes from the [Damn Interesting website](http://www.damninteresting.com/89-263-201-500-337-480/) and my love of the Nicholas Cage movie series \"National Treasure\". For more info see the [Museum of Unnatural History](http://www.unmuseum.org/bealepap.htm)."}, {:title=>"[2016-07-01] Challenge #273 [Hard] Elggob - Make a Boggle Layout", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4qt12j/20160701_challenge_273_hard_elggob_make_a_boggle/", :permalink=>"/r/dailyprogrammer/comments/4qt12j/20160701_challenge_273_hard_elggob_make_a_boggle/", :score=>38, :comments=>12, :description=>"# Description\n\nThe game of Boggle is familiar to many - a set of 36 6-sided dice with letters on them, which then turns into a 6x6 layout of letters, and then you work on finding properly spelled words by moving from one die to another. We've done a Boggle challenge in the past. In Boggle rules you may move left, right, up, down, and diagonally, but you may not use the same die twice as you spell a word. \n\nNow can you do it backwards? Given a list of target words, can you create a Boggle layout using any other letters you wish that could yield those words and more?\n\n# Input Description\n\nFirst you'll be given an integer on a line telling you how many words to target. Then you'll be given a list of *N* target words, one per line. Example:\n\n    3 \n    CATCHER\n    MOUSE \n    AIRY \n\n# Output Description\n\nYour program should emit a possible Boggle layout that could yield those words and any other ones that happen to be possible. For example:\n\n    L   W   D   J   M   Q\n    L   A\tH\tE\tR   J\n    K   C\tI\tE\tS   O\n    N   A\tT\tR\tU   E\n    P   C\tY\tM\tO   W\n    T   E   O   H   T   C\n\nNotice that you can spell words like COW, TOW, TOE, TOURS, and more in the above, in addition to the 3 words we had to target. \n\n# Challenge Input\n\n    9\n    MID\n    RANA\n    GRANT\n    BOCCA\n    CILIA\n    WAIVE\n    OSSAL\n    SALMO\n    FICE\n\n# Credit\n\nThis challenge as inspired by [a question](https://www.reddit.com/r/compsci/comments/3zjt44/filling_a_grid_with_words_using_boggle_rules/) from /u/JRhapsodus. "}, {:title=>"[2016-06-29] Challenge #273 [Intermediate] Twist up a message", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4qg2eo/20160629_challenge_273_intermediate_twist_up_a/", :permalink=>"/r/dailyprogrammer/comments/4qg2eo/20160629_challenge_273_intermediate_twist_up_a/", :score=>47, :comments=>46, :description=>"##**Description**\n\nAs we know English uses Latin alphabet consisting of 26 characters, both upper- and lower-case:\n\n    Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz\n\nHowever, many other languages use its modified version, with some of the letters removed and additional diacritics added to some of them. For instance, Czech alphabet has following additional characters:\n\n    Áá Čč Ďď Éé Ěě Íí Ňň Óó Řř Šš Ťť Úú Ůů Ýý Žž\n\nThe worst of all is probably Vietnamese:\n\n    Áá Àà Ãã Ảả Ạạ Ââ Ấấ Ầầ Ẫẫ Ẩẩ Ậậ Ăă Ắắ Ằằ Ẵẵ Ẳẳ Ặặ Đđ Éé Èè Ẽẽ Ẻẻ Ẹẹ Êê Ếế Ềề Ễễ Ểể Ệệ\n    Íí Ìì Ĩĩ Ỉỉ Ịị Óó Òò Õõ Ỏỏ Ọọ Ôô Ốố Ồồ Ỗỗ Ổổ Ộộ Ơơ Ớớ Ờờ Ỡỡ Ởở Ợợ\n    Úú Ùù Ũũ Ủủ Ụụ Ưư Ứứ Ừừ Ữữ Ửử Ựự Ýý Ỳỳ Ỹỹ Ỷỷ Ỵỵ\n\nYour job is to write a method `twistUp` which \"twists up\" a string, making it as much filled with diacritics as possible.\n\n##**Input**\n\nYour input will consist of one string of any letters of the English alphabet, digits and special characters. Characters that cannot be diactriticized should be returned in its original form.\n\n##**Output**\n\nOutput will consist of a modified text.\n\n##**Sample input**\n\n    For, after all, how do we know that two and two make four? \n    Or that the force of gravity works? Or that the past is unchangeable? \n    If both the past and the external world exist only in the mind, \n    and if the mind itself is controllable – what then?\n\n##**Sample output**\n\n    Ƒǒṝ, āᶂťȅŗ ąľḷ, ħṓẃ ᶁớ ẅē ḵȵȭŵ ŧⱨąť ȶẁô ǎǹḍ ẗŵȫ ᶆầᶄĕ ḟõṵɍ? \n    Ȯᵳ ƫẖẩť ṯħê ḟṑȑćẽ ỏᵮ ǧŗảᶌıⱦỳ ẘǒᵲᶄṧ? Ṍᵲ țḩᶏᵵ ⱦḥḙ ṗᶏşʈ ḯş ůǹḉḧẳṇģḕâɓƚė?\n    Ǐḟ Ƅȫţȟ țḧè ƥāṣț ặňḓ ŧħᶒ ḙxᵵęȑᶇȁȴ ẁőŕȴɗ ȩxĭʂƫ ǫȵľȳ ȋɳ ȶḥẽ ṁįƞḋ, \n    ǡǹƌ ᵻḟ ṱȟë ḿīᵰᶑ ḭẗᵴḛɫᵮ ɨś čổɲȶṙŏłḹạɓɭḕ – ŵḫāṯ ƫḩḕñ?\n\n##**Notes**\n\n* If your browser/compiler/console cannot display diacritics, switch encoding to UTF-8.\n* Other than diacritics, you can use similar-looking characters like Cyrillic`И` for `N`\n\n##**Bonus challenges**\n\nMake your `twistUp` method take not only letters of English alphabet, but all the letters:\n\n    Dżdżystym rankiem gżegżółki i piegże, zamiast wziąć się za dżdżownice,\n    nażarły się na czczo miąższu rzeżuchy i rzędem rzygały do rozżarzonej brytfanny.\n\n    Ɖẑɗɀỵŝțỳɱ ɾẵᶇḵīȩᵯ ĝʑẻğẑộḷǩᵻ î ƥỉëģźè, ʐậɱǐāʂţ ẅɀỉḁĉ ᶊīė ẑắ ḍɀḏźỏẉᵰiɕȅ,\n    ṋȧʑȧṝⱡý sïë ƞẩ čʐčʑỡ ɱᶖẵẕśẓǘ ᶉẕẻẓǚḉḣỷ ĩ ɼʑéɗḕᶆ ɼᵶỳǥäḷỵ ƌờ ᵳờẕɀăȓʐőȵḗʝ ɓṛŷṭƒằǹɳý.\n\n\nTwisted up characters don't need to be the same every time!\n\n    Boy, this challenge sure is fun.\n    \n    Ƀɵƴ, ṫẖiŝ çħẳḽḻęńĝễ ṧụᵳẽ ìṧ ᵮựᵰ.\n    Ƌȍý, ṯḩįš çẖǎḹļȩᶇġẻ șùɼė īṧ ᶂǔṇ.\n    Ḇȏƴ, ţȟïš ȼḫẫḹŀẻᶇǧề ŝŭᶉē ìṣ ᵮǘń.\n    Ƀòý, ȶḥỉṩ ċħǡļḹệǹǥɇ ŝǖȓé ḭʂ ᶂǘǹ.\n\nWrite an additional `untwist` method which takes a twisted up text and converts its characters into plain Latin:\n\n    Ṭħë ᶈṝộȱƒ țḣẵţ ƭĥề ɬıṭᵵḷḛ ᵱᵲíȵċɇ ɇxẛṣⱦėḏ ɨś ƫḥẳṯ ħė ẘắś ĉⱨȃṟḿíņğ, ƫħằṫ ĥḛ ᶅẫủᶃḩëᶑ,\n    áñɗ ţḥầť ḫẻ ẉâṧ łỗǫḳĩņğ ᶂờŕ ầ ᶊĥȅẹᵽ. Īḟ ǡɲÿɓộđʏ ẁȧṉȶȿ â ȿĥểêᵱ, ⱦḣąʈ ᵻṥ ȁ ᵱṟỗǒƒ ṫȟǟṭ ḫĕ ḕᶍĭṩťș.\n\n    The proof that the little prince existed is that he was charming, that he laughed, \n    and that he was looking for a sheep. If anybody wants a sheep, that is a proof that he exists.\n\n\n# bonus 2\n\nFind a creative way to generate the mapping scheme (with minimal \"hand crafted\" tables, and the most mappings.\n\n-----\n\nthanks to /u/szerlok for the challenge description.  We need more submissions at /r/dailyprogrammer_ideas "}, {:title=>"[2016-06-27] Challenge #273 [Easy] Getting a degree", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4q35ip/20160627_challenge_273_easy_getting_a_degree/", :permalink=>"/r/dailyprogrammer/comments/4q35ip/20160627_challenge_273_easy_getting_a_degree/", :score=>85, :comments=>184, :description=>"# Description\n\nWelcome to DailyProgrammer University. Today you will be earning a degree\nin converting degrees. This includes Fahrenheit, Celsius, Kelvin,\nDegrees (angle), and Radians.\n\n# Input Description\n\nYou will be given two lines of text as input. On the first line, you will\nreceive a number followed by two letters, the first representing the unit\nthat the number is currently in, the second representing the unit it needs\nto be converted to.\n\nExamples of valid units are:\n\n* `d` for degrees of a circle\n* `r` for radians\n\n# Output Description\n\nYou must output the given input value, in the unit specified. It must be\nfollowed by the unit letter. You may round to a whole number, or to a few\ndecimal places.\n\n# Challenge Input\n\n    3.1416rd\n    90dr\n\n# Challenge Output\n\n    180d\n    1.57r\n\n# Bonus\n\nAlso support these units:\n\n* `c` for Celsius\n* `f` for Fahrenheit\n* `k` for Kelvin\n\nIf the two units given are incompatible, give an error message as output.\n\n# Bonus Input\n\n    212fc\n    70cf\n    100cr\n    315.15kc\n\n# Bonus Output\n\n    100c\n    158f\n    No candidate for conversion\n    42c\n\n# Notes\n\n* [See here](https://en.wikipedia.org/wiki/Conversion_of_units_of_temperature)\n  for a wikipedia page with temperature conversion formulas.\n* [See here](http://www.teacherschoice.com.au/maths_library/angles/angles.htm)\n  for a random web link about converting between degrees and radians.\n\n# Finally\n\nHave a good challenge idea?\nConsider submitting it to /r/dailyprogrammer_ideas"}, {:title=>"[2016-06-24] Challenge #272 [Hard] Air Pressure router valve - Part 1.", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4pnky5/20160624_challenge_272_hard_air_pressure_router/", :permalink=>"/r/dailyprogrammer/comments/4pnky5/20160624_challenge_272_hard_air_pressure_router/", :score=>39, :comments=>23, :description=>"Consider an air pressure system with a high pressure, and optionally, low pressure tanks. Air (or any fluid) will move from high pressure zone to low pressure if there is an open pathway.\n\nThere is a circular (donut tube) hub.  At the north end of the hub is an inlet tube that can only receive air from the high pressure tank (one way valve at the tank).\n\nInside the tubular donut are blocking metalic slugs that are controlled magnetically by up to 2 servo motors on top and bottom (in same plane as) of the donut.\n\nEach servo can move an unlimited amount of slugs inside the hub, with each slug set at a fixed distance from each other, determined by magnetic attachments to the servo.  If there are 2 servos, the slugs they control may or may not interloc, but there is a restriction on combined positions, as slugs may not jump over each other.\n\nThe donut hub can be modeled as a straight line where coordinates wrap around from the 2 end-points.  At each integer position on the line, there may be an inlet/outlet tube with a fixed connection.  The legend for those tube states are: (# represents a digit/number)\n\n`H` - **High Pressure** input.  At least 1 inlet tube at position 0.  Likely never need for additional High pressure inputs into hub.\n\n`_`- **No Port**.  Permanently closed no inlet or outlet at that integer location.\n\n`#` **Bypass loop**:  connects to another port on the hub.  The number indicates the integer position on the hub that is connected to this port.\n\n`#M` - 3 data points:  First number is a motor id.  M indicates that this is an \"**open motor**\".  The motor exhausts to atmosphere.  An open motor is one that has (optionally) its own valves to control timing.  The generally provide \"continuous directional force\" [example](https://www.youtube.com/watch?v=QDR40Eyuu7w) of valveless engine.\n\n`#F#` - **Feedback motor**.  Like an open motor but with exhaust connected back to the hub.  The extra trailing number indicates the hub port the exhaust is connected to.  The exhaust once into the hub would generally get routed to a Low Pressure outlet.\n\n`#B#` - **Binary motor:** Lead number is also motor id.  Trailing number is the actuator's exhaust port connection.  A binary motor is an actuator controlled by the hub.  When its inlet port is open, its outlet port (connected to trailing number) must be closed.  This setting fills the actuator allowing it to work.  When its outlet/exhaust is open and inlet closed, the actuator relaxes (through spring).\n\n`Li` - **Low Pressure inlet**  If present would feed low power to any motors that share its open path.\n\n`Lo` - **Low Pressure outlet**  If present, exhaust from `F` motors would route/path into these.  When low pressure inlet is blocked, then braking to the motor is applied while filling the low pressure tank with \"stored energy\"\n\n`i#` - Input from exhaust of any motor.  Trailing number connects to original F or B motor input.  An extra one way valve ensures that exhaust can only flow one way from motor.  To allow reverse flow, then use a `passtrhough (#)` port descriptor.\n\n`E` - **Exhaust**.  If present allows any air pressure in the \"open hub path\" that includes the Exhaust to go to 0.\n\n'X' - **Hub closure** - hub simplification to prevent wrap around of air back to start.  Barrier inside the hub that permanently blocks air flow.\n\n#motor states\nThe challenge is to catalogue all possible motor states given a port layout, and a \"slug lockring\".  The **basic motor states** for each type:\n\nM off 0 - outlet is blocked  \nM on 1 - outlet is open   \nB off 0 - outlet is blocked  OR exhaust is open   \nB on 1 - outlet is open AND (exhaust is closed) OR exhaust paths/routes to H.  \nF off 0 - outlet is blocked  OR (exhaust is blocked OR no free path from exhaust to E or Lo)  \nF on 1 - outlet is open   AND exhaust is open AND free path from exhaust to `E` or `Lo`)  \n\nNote: all motors are off if H is blocked.  F motors are off if `Lo` is blocked.  \n\n**special modes:**\n\nB hold 2: outlet closed AND (exhaust closed OR no path/route to open Lo or E).  \nB passtrhough 3:  (basic off 0).  Outlet open AND exhaust open. (this creates an open path from H to exhaust node, which would typically wreck havoc with normal routing among multiple motors)  \n\nF brake 2: ON and outlet open AND path/routed to `Lo` AND `Li` is blocked.  \nF brake hard 3: OFF AND (exhaust is blocked OR exhaust path to `Lo` is blocked)  \nF reverse 4:  H (High Pressure input) is blocked from input  AND input open and is path/routed to `E` AND exhaust is open and path/routed to `Li`  \n\n#input format\n2 (or 3) lines (with visual header)\nAligned boxes of hub index and port description at each index (visual sugar. doesn't need parsing)   \na spaced delimited list of the port description at each hub index.  \nA space delimited list of slug intervals with 0 the first index.\nAn optional additional space delimited list of slug intervals if a 2nd servo-motor is being used.\n\n\n#output format\n\nThe challenges are to rotate dials (servo settings) to every integer position to determine the motor states of all motors connected to hub at each dial setting.\n\n**basic output** (one line per dial position)  \ndial setting (2 if 2 servos), motor state of  each motor (in motorid order).  Can also include  any exhaust, `Lo` or `E` flow access.   Its possible to output all state in this table needed to refine 2nd output stage below, getting the trickier path logic in that pass.\n\n**exploration output** (one line per motor id: state)  \nmotorid state, dial settings that create that state for that motor combination (pair format of some kind if 2 dials)\n\n(this format is useful to explore adding more slugs to a dial to enable more state combinations)\n\n**summary output**   \none line per unique motor state combination (likely fewer than dial settings) followed by count of lines, count of just basic states and count of special states.\n\n#1. Basic states challenge \n\nfor clarity the slug array input of `0 11 17` means that:\n \nAt dial position 0, the slugs block ports `0 11 17`.  \nAt dial position 1, the slugs block ports `1 12 18`.  \nAt dial position 2, the slugs block ports `2 13 19`.  \nAt dial position 20, the slugs block ports `20 7 13`.  \n\nThere are 24 total dial positions on the hub.\n\n    ┌─┬─┬─┬─┬──┬─┬─┬────┬─┬─┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┐\n    │0│1│2│3│4 │5│6│7   │8│9│10│11│12│13│14│15│16│17│18│19│20│21│22│23│\n    ├─┼─┼─┼─┼──┼─┼─┼────┼─┼─┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┤\n    │H│_│6│_│1M│_│2│2F12│_│_│_ │_ │i7│Lo│_ │Li│E │_ │_ │_ │_ │_ │_ │_ │\n    └─┴─┴─┴─┴──┴─┴─┴────┴─┴─┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┘\n\n     H _ 6 _ 1M _ 2 2F12 _ _ _ _ i7 Lo _ Li E _ _ _ _ _ _ _\n     0 11 17\n\nAn (tldr) explanation of input:  \nA slug on node 4, will block input to motor 1.  But the bypass loop from 2 to 6 will allow air to flow to motor 2 at node 7.  \nA slug on node 6 would let air into motor 1, but block all flow further down the tube.  \nA slug on node 8 would let air into both previous motors, and allow motor 2 to exhaust through node 9, and the air flow to continue further.\n\n**output**  \n(as soon as I do it, but this system has all 4 basic state combinations along with regenerative and hard braking on motor2):  **edit: posted in comments**\n\n# 2. simpler challenge\n3 non-feedback motors.  Can you figure out the dial setting to turn on motor 2M without the other 2 being on?  All 8 state combinations are possible.\n\n    ┌─┬─┬─┬─┬──┬─┬─┬─┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┐\n    │0│1│2│3│4 │5│6│7│8 │9 │10│11│12│13│14│15│16│17│18│19│20│21│22│23│\n    ├─┼─┼─┼─┼──┼─┼─┼─┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┤\n    │H│_│6│_│1M│_│2│_│14│2M│_ │_ │3M│_ │8 │_ │_ │_ │_ │_ │_ │_ │_ │_ │\n    └─┴─┴─┴─┴──┴─┴─┴─┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┘\n\n      H _ 6 _ 1M _ 2 _ 14 2M _  _ 3M  _ 8 _ _ _ _ _ _ _ _ _\n      0 6 11\n\nwill let someone else spoil first.\n\n__\n\nbonuses are aimed at crafting input interactively with your function.  So it is advised to parse it from a string.  You are not expected to write a solver program (that will be part 2 of the challenge some other week)\n\noutputs for bonuses are the input format.\n\n# bonus 1\nCan you design a single servo controller for a car with left front motor, right front motor, and rear wheel drive motor.  With regenerative braking on the back, and skid steering on the front (steer by either hard braking one side, and/or having one motor on and other off).  Available states must include 3 motors on, but there doesn't need to be power to rear wheels when steering.\n\nis a reverse gear possible?\n\n\n#bonus 2\nUsing only B type motors, can you make a 3 degree of freedom (DOF) robot arm?  4 DOF?  Each degree of freedom needs to have on off and hold states.  All 3 must have hold states while another B motor is either on/off, but they can go on/off one at a time.  So with a 3 DOF robot, there are only 7 needed state combinations:  All hold, and on/off for each while other 2 hold."}, {:title=>"[2016-06-22] Challenge #272 [Intermediate] Dither that image", :url=>"https://www.reddit.com/r/dailyprogrammer/comments/4paxp4/20160622_challenge_272_intermediate_dither_that/", :permalink=>"/r/dailyprogrammer/comments/4paxp4/20160622_challenge_272_intermediate_dither_that/", :score=>55, :comments=>37, :description=>"# Description\n\n[Dithering](https://en.wikipedia.org/wiki/Dither) is the intentional use of\nnoise to reduce the error of compression. If you start with a color image\nand want to reduce it to two colors (black and white) the naive approach is\nto threshold the image. However, the results are usually terrible.\n\n* [Color Solids](http://i.imgur.com/kjWn2Q1.png)\n* [Thresholded Solids](http://i.imgur.com/RDOMCfg.png)\n\nOne of the most popular dithering algorithms is\n[Floyd-Steinberg](https://en.wikipedia.org/wiki/Floyd%E2%80%93Steinberg_dithering).\nWhen a pixel is thresholded, the error (difference) between the original value\nand the converted value is carried forward into nearby pixels.\n\n* [Floyd-Steinberg Solids](http://i.imgur.com/w9DFOKS.png)\n\nThere are other approaches, such as\n[Ordered Dithering](https://en.wikipedia.org/wiki/Ordered_dithering) with a\nBayer Matrix.\n\n* [Bayer solids](http://i.imgur.com/mLKUyfn.png)\n\n# Input\n\nYour program will take a color or grayscale image as its input. You may choose\nyour input method appropriate to your language of choice. If you want to do it\nyourself, I suggest picking a [Netpbm](https://en.wikipedia.org/wiki/Netpbm)\nformat, which is easy to read.\n\n# Output\n\nOutput a two-color (e.g. Black and White) dithered image in your choice of\nformat. Again, I suggest picking a Netpbm format, which is easy to write.\n\n# Notes\n\n* [Here](http://www.tannerhelland.com/4660/dithering-eleven-algorithms-source-code/)\n  is a good resource for dithering algorithms.\n\n# Finally\n\nHave a good challenge idea?\nConsider submitting it to /r/dailyprogrammer_ideas\n\nThanks to /u/skeeto for this [challenge idea]\n(https://www.reddit.com/r/dailyprogrammer_ideas/comments/4nt7rp)"}]